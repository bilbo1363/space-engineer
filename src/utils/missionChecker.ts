import { Mission, MissionObjective } from '../types/missions';
import { RobotState } from '../types/robots';
import { ProgramNodeInstance } from '../types/nodes';

export interface MissionProgress {
  completed: boolean;
  objectives: {
    [key: string]: boolean;
  };
}

export class MissionChecker {
  private mission: Mission;
  private robotState: RobotState;
  private program: ProgramNodeInstance[];
  private startPosition: [number, number];

  constructor(mission: Mission, robotState: RobotState, program: ProgramNodeInstance[]) {
    this.mission = mission;
    this.robotState = robotState;
    this.program = program;
    this.startPosition = [mission.startPosition.x, mission.startPosition.y];
  }

  checkObjectives(): MissionProgress {
    const objectives: { [key: string]: boolean } = {};
    let allCompleted = true;

    for (const objective of this.mission.objectives) {
      const isCompleted = this.checkObjective(objective);
      objectives[objective.id] = isCompleted;

      if (objective.required && !isCompleted) {
        allCompleted = false;
      }
    }

    return {
      completed: allCompleted,
      objectives,
    };
  }

  private checkObjective(objective: MissionObjective): boolean {
    switch (objective.type) {
      case 'reach':
      case 'move':
        return this.checkReachObjective(objective);
      
      case 'pickup':
        return this.checkPickupObjective(objective);
      
      case 'deliver':
        return this.checkDeliverObjective(objective);
      
      case 'collect':
        return this.checkCollectObjective(objective);
      
      case 'log_at':
        return this.checkLogAtObjective(objective);
      
      case 'custom':
        return this.checkCustomObjective(objective);
      
      default:
        console.warn(`Unknown objective type: ${objective.type}`);
        return false;
    }
  }

  private checkReachObjective(objective: MissionObjective): boolean {
    if (!objective.target) return false;

    const [targetX, targetY] = objective.target;
    const [robotX, robotY] = this.robotState.position;

    return robotX === targetX && robotY === targetY;
  }

  private checkPickupObjective(objective: MissionObjective): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –≤–∑—è—Ç
    const targetId = objective.target as string;
    const pickedUpItems = this.robotState.pickedUpItems || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–±–æ —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å–µ–π—á–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –ª–∏–±–æ –±—ã–ª –≤–∑—è—Ç —Ä–∞–Ω–µ–µ
    const hasItemNow = this.robotState.inventory.includes(targetId);
    const hasPickedUpBefore = pickedUpItems.includes(targetId);
    
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', {
      targetId,
      hasItemNow,
      hasPickedUpBefore,
      inventory: this.robotState.inventory,
      pickedUpItems
    });
    
    return hasItemNow || hasPickedUpBefore;
  }

  private checkDeliverObjective(objective: MissionObjective): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±–∞–∑—É
    const targetBaseId = objective.target as string;
    const baseObject = this.mission.objects.find(obj => 
      obj.type === 'base' && (obj.id === targetBaseId || !targetBaseId)
    );
    
    if (!baseObject) {
      console.log('‚ùå –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return false;
    }

    const [baseX, baseY] = baseObject.position;
    const [robotX, robotY] = this.robotState.position;
    
    const onBase = robotX === baseX && robotY === baseY;
    const inventoryEmpty = this.robotState.inventory.length === 0;
    const delivered = baseObject.properties?.delivered === true;
    const pickedUpItems = this.robotState.pickedUpItems || [];
    const hasPickedUpSomething = pickedUpItems.length > 0;
    
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', {
      onBase,
      inventoryEmpty,
      delivered,
      hasPickedUpSomething,
      robotPos: [robotX, robotY],
      basePos: [baseX, baseY],
      pickedUpItems
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –≤–∑—è—Ç –ò –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±–∞–∑—É
    return hasPickedUpSomething && ((onBase && inventoryEmpty) || delivered);
  }

  private checkLogAtObjective(objective: MissionObjective): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –±—ã–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏
    const target = objective.target as { positions: [number, number][]; requiredMessage?: string };
    
    if (!target.positions) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
    const allActivated = target.positions.every(([x, y]) => {
      const station = this.mission.objects.find(obj =>
        obj.type === 'station' &&
        obj.position[0] === x &&
        obj.position[1] === y
      );

      if (!station) {
        console.log(`‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${x}, ${y}]`);
        return false;
      }

      const isActivated = station.properties?.activated === true;
      console.log(`üéØ –°—Ç–∞–Ω—Ü–∏—è –Ω–∞ [${x}, ${y}]: ${isActivated ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ' : '–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ùå'}`);
      
      return isActivated;
    });

    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ log_at:', {
      allActivated,
      positions: target.positions,
      requiredMessage: target.requiredMessage
    });

    return allActivated;
  }

  private checkCollectObjective(objective: MissionObjective): boolean {
    // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏—Ö –º–∏—Å—Å–∏—è—Ö
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –º–∏—Å—Å–∏–∏ –Ω–∞ —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
    return false;
  }

  private checkCustomObjective(objective: MissionObjective): boolean {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–µ–ª–µ–π
    const description = objective.description.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏–∫–ª–∞
    if (description.includes('–∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª') || description.includes('–ø–æ–≤—Ç–æ—Ä–∏—Ç—å')) {
      return this.hasLoopInProgram();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è
    if (description.includes('–µ—Å–ª–∏') || description.includes('—É—Å–ª–æ–≤–∏–µ')) {
      return this.hasConditionalInProgram();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞—è–∫–∞
    if (description.includes('–∞–∫—Ç–∏–≤–∏—Ä—É–π –º–∞—è–∫') || description.includes('–∞–∫—Ç–∏–≤–∞—Ü–∏—è')) {
      return this.checkBeaconActivation();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö —É–≥–ª–æ–≤ (–¥–ª—è –º–∏—Å—Å–∏–∏ 2.2)
    if (description.includes('–ø–æ—Å–µ—Ç–∏ –≤—Å–µ —É–≥–ª—ã')) {
      return this.checkAllCornersVisited();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏—è > 20%
    if (description.includes('–ø–æ–∫–∞') && description.includes('—ç–Ω–µ—Ä–≥–∏–∏')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ:
      // 1. –ï—Å—Ç—å —Ü–∏–∫–ª repeatWhile –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
      // 2. –≠–Ω–µ—Ä–≥–∏—è —Ä–æ–±–æ—Ç–∞ <= 20% (—Å—Ç—Ä–æ–≥–æ, –∫–∞–∫ –≤ —É—Å–ª–æ–≤–∏–∏ –∑–∞–¥–∞—á–∏)
      const hasWhileLoop = this.hasWhileLoopInProgram();
      const energyDepleted = this.robotState.energy <= 20;
      
      console.log('üîã –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏:', {
        hasWhileLoop,
        currentEnergy: this.robotState.energy,
        energyDepleted,
        result: hasWhileLoop && energyDepleted
      });
      
      return hasWhileLoop && energyDepleted;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    if (description.includes('–ø—Ä–æ–µ–¥—å') && description.includes('–∫–ª–µ—Ç–æ–∫')) {
      const distance = this.calculateDistance();
      const minDistance = 15; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –º–∏—Å—Å–∏–∏ 2.4
      
      console.log('üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏:', {
        distance,
        minDistance,
        result: distance >= minDistance
      });
      
      return distance >= minDistance;
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
    return true;
  }

  private hasLoopInProgram(): boolean {
    return this.searchInProgram(this.program, node => 
      node.nodeType === 'repeat' || node.nodeType === 'repeatWhile'
    );
  }

  private hasConditionalInProgram(): boolean {
    return this.searchInProgram(this.program, node => 
      node.nodeType === 'if'
    );
  }

  private hasWhileLoopInProgram(): boolean {
    return this.searchInProgram(this.program, node => 
      node.nodeType === 'repeatWhile'
    );
  }

  private searchInProgram(
    nodes: ProgramNodeInstance[],
    predicate: (node: ProgramNodeInstance) => boolean
  ): boolean {
    for (const node of nodes) {
      if (predicate(node)) {
        return true;
      }

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
      if (node.children && node.children.length > 0) {
        if (this.searchInProgram(node.children, predicate)) {
          return true;
        }
      }
    }

    return false;
  }

  private checkBeaconActivation(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–∞—è–∫ –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –º–∏—Å—Å–∏–∏
    const beacon = this.mission.objects.find(obj => obj.type === 'station');
    return beacon?.properties?.activated === true;
  }

  private checkAllCornersVisited(): boolean {
    // –î–ª—è –º–∏—Å—Å–∏–∏ 2.2 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–±–æ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    const [startX, startY] = [
      this.mission.startPosition.x,
      this.mission.startPosition.y
    ];
    const [robotX, robotY] = this.robotState.position;

    return robotX === startX && robotY === startY;
  }

  private calculateDistance(): number {
    // –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –¥–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const [startX, startY] = this.startPosition;
    const [currentX, currentY] = this.robotState.position;
    
    const distance = Math.abs(currentX - startX) + Math.abs(currentY - startY);
    return distance;
  }
}
