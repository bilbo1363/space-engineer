// –¢–∏–ø—ã –¥–ª—è –Ω–æ–¥–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

export type NodeCategory = 'movement' | 'action' | 'utility' | 'sensor' | 'loop' | 'conditional' | 'function';

export type Direction = 'north' | 'east' | 'south' | 'west';

export interface NodeParameter {
  name: string;
  label: string;
  type: 'number' | 'string' | 'boolean' | 'direction' | 'expression';
  min?: number;
  max?: number;
  default?: any;
  options?: string[];
}

export interface BaseNode {
  id: string;
  type: string;
  name: string;
  icon: string;
  description: string;
  category: NodeCategory;
  energyCost: number;
  duration: number | 'variable';
  parameters?: NodeParameter[];
  conditions?: string[];
}

export interface MovementNode extends BaseNode {
  category: 'movement';
  type: 'moveForward' | 'moveBackward' | 'turnLeft' | 'turnRight';
}

export interface ActionNode extends BaseNode {
  category: 'action';
  type: 'pickUp' | 'putDown';
}

export interface UtilityNode extends BaseNode {
  category: 'utility';
  type: 'wait' | 'log';
}

export interface SensorNode extends BaseNode {
  category: 'sensor';
  type: 'look' | 'scanArea' | 'distanceSensor';
  returns: string;
}

export interface LoopNode extends BaseNode {
  category: 'loop';
  type: 'repeat' | 'repeatWhile' | 'break';
  children?: ProgramNode[];
}

export interface ConditionalNode extends BaseNode {
  category: 'conditional';
  type: 'if' | 'else';
  children?: ProgramNode[];
}

export type ProgramNode = MovementNode | ActionNode | UtilityNode | SensorNode | LoopNode | ConditionalNode;

export interface ProgramNodeInstance {
  id: string;
  nodeType: string;
  parameters?: Record<string, any>;
  children?: ProgramNodeInstance[];
  elseBranch?: ProgramNodeInstance[];  // –î–ª—è –≤–µ—Ç–∫–∏ ELSE –≤ —É—Å–ª–æ–≤–∏—è—Ö
  
  // –î–ª—è —Ñ—É–Ω–∫—Ü–∏–π:
  functionId?: string;  // ID —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏)
}

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export interface UserFunction {
  id: string;                      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  name: string;                    // –ù–∞–∑–≤–∞–Ω–∏–µ (–°–æ–±—Ä–∞—Ç—å–û–±—Ä–∞–∑–µ—Ü)
  icon: string;                    // –ò–∫–æ–Ω–∫–∞ (üì¶)
  color: string;                   // –¶–≤–µ—Ç (#4CAF50)
  description?: string;            // –û–ø–∏—Å–∞–Ω–∏–µ
  body: ProgramNodeInstance[];     // –¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
  createdAt: number;               // Timestamp —Å–æ–∑–¥–∞–Ω–∏—è
  usageCount: number;              // –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
}
