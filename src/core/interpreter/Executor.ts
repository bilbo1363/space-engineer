import { ProgramNodeInstance, UserFunction } from '../../types/nodes';
import { RobotState } from '../../types/robots';
import { Direction } from '../../types/nodes';
import { Mission } from '../../types/missions';
import { NODE_DEFINITIONS } from '../nodes/nodeDefinitions';

type ExecutorCallback = (event: ExecutorEvent) => void | Promise<void>;

interface ExecutorEvent {
  type: 'nodeStart' | 'nodeComplete' | 'error' | 'programComplete' | 'stateChange';
  nodeId?: string;
  nodeType?: string;
  error?: string;
  newState?: Partial<RobotState>;
}

export class Executor {
  private program: ProgramNodeInstance[] = [];
  private currentIndex: number = 0;
  private isRunning: boolean = false;
  private isPaused: boolean = false;
  private callbacks: ExecutorCallback[] = [];
  private robotState: RobotState;
  private initialState: RobotState;
  private mission: Mission | null = null;
  private initialMissionObjects: any[] = [];
  private getFunctionById: (id: string) => UserFunction | undefined;

  constructor(
    initialRobotState: RobotState, 
    mission?: Mission,
    getFunctionById?: (id: string) => UserFunction | undefined
  ) {
    this.robotState = { ...initialRobotState };
    this.initialState = { ...initialRobotState };
    
    // –†–∞–±–æ—Ç–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    this.mission = mission || null;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–∏—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞
    if (mission?.objects) {
      this.initialMissionObjects = JSON.parse(JSON.stringify(mission.objects));
    }
    
    this.getFunctionById = getFunctionById || (() => undefined);
  }

  setMission(mission: Mission): void {
    // –†–∞–±–æ—Ç–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    this.mission = mission;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    if (mission.objects) {
      this.initialMissionObjects = JSON.parse(JSON.stringify(mission.objects));
    }
  }

  loadProgram(program: ProgramNodeInstance[]): void {
    console.log('üì• Executor.loadProgram –≤—ã–∑–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É:', JSON.stringify(program, null, 2));
    this.program = program;
    this.currentIndex = 0;
    console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Executor, this.program:', this.program);
  }

  subscribe(callback: ExecutorCallback): () => void {
    this.callbacks.push(callback);
    return () => {
      this.callbacks = this.callbacks.filter(cb => cb !== callback);
    };
  }

  private emit(event: ExecutorEvent): void {
    this.callbacks.forEach(cb => cb(event));
  }

  async run(): Promise<void> {
    if (this.isRunning) return;

    this.isRunning = true;
    this.isPaused = false;
    this.currentIndex = 0;

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –¥–≤–µ—Ä–µ–π
    this.startDoorTimers();

    try {
      while (this.currentIndex < this.program.length && this.isRunning) {
        if (this.isPaused) {
          await new Promise(resolve => setTimeout(resolve, 100));
          continue;
        }

        const node = this.program[this.currentIndex];
        await this.executeNode(node);
        this.currentIndex++;
      }

      if (this.isRunning) {
        this.emit({ type: 'programComplete' });
      }
    } catch (error) {
      this.emit({
        type: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    } finally {
      this.isRunning = false;
    }
  }

  private startDoorTimers(): void {
    if (!this.mission) return;

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–≤–µ—Ä–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    this.mission.objects.forEach(obj => {
      if (obj.type === 'obstacle' && obj.properties?.isDoor) {
        const openTime = obj.properties.openTime || 3;
        const openDuration = obj.properties.openDuration || 2;

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å —á–µ—Ä–µ–∑ openTime —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          if (obj.properties) {
            obj.properties.isOpen = true;
            console.log('üö™ –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
            
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            this.emit({
              type: 'stateChange',
              newState: this.robotState,
            });
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ openDuration —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–±–æ—Ç –Ω–µ –Ω–∞ –¥–≤–µ—Ä–∏)
            setTimeout(() => {
              if (obj.properties) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–æ–∏—Ç –ª–∏ —Ä–æ–±–æ—Ç –Ω–∞ –¥–≤–µ—Ä–∏
                const [doorX, doorY] = obj.position;
                const [robotX, robotY] = this.robotState.position;
                
                if (robotX === doorX && robotY === doorY) {
                  console.log('üö™ –î–≤–µ—Ä—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è - —Ä–æ–±–æ—Ç –≤–Ω—É—Ç—Ä–∏! –ñ–¥–µ–º...');
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å, —É—à–µ–ª –ª–∏ —Ä–æ–±–æ—Ç
                  const checkInterval = setInterval(() => {
                    const [currentX, currentY] = this.robotState.position;
                    if (currentX !== doorX || currentY !== doorY) {
                      // –†–æ–±–æ—Ç —É—à–µ–ª, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å
                      if (obj.properties) {
                        obj.properties.isOpen = false;
                        console.log('üö™ –î–≤–µ—Ä—å –∑–∞–∫—Ä—ã–ª–∞—Å—å (—Ä–æ–±–æ—Ç —É—à–µ–ª)!');
                        
                        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                        this.emit({
                          type: 'stateChange',
                          newState: this.robotState,
                        });
                      }
                      clearInterval(checkInterval);
                    }
                  }, 500);
                } else {
                  obj.properties.isOpen = false;
                  console.log('üö™ –î–≤–µ—Ä—å –∑–∞–∫—Ä—ã–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
                  
                  // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                  this.emit({
                    type: 'stateChange',
                    newState: this.robotState,
                  });
                }
              }
            }, openDuration * 1000);
          }
        }, openTime * 1000);
      }
    });
  }

  pause(): void {
    this.isPaused = true;
  }

  resume(): void {
    this.isPaused = false;
  }

  stop(): void {
    this.isRunning = false;
    this.isPaused = false;
  }

  reset(): void {
    this.stop();
    this.currentIndex = 0;
    this.robotState = { ...this.initialState };
    this.emit({
      type: 'stateChange',
      newState: this.robotState,
    });
  }

  resetMission(): void {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –º–∏—Å—Å–∏–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (this.mission && this.initialMissionObjects.length > 0) {
      this.mission.objects = JSON.parse(JSON.stringify(this.initialMissionObjects));
      console.log('üîÑ –û–±—ä–µ–∫—Ç—ã –º–∏—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', this.mission.objects);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–±–æ—Ç–∞
      this.robotState = { ...this.initialState };
      
      // –û—á–∏—â–∞–µ–º pickedUpItems
      this.robotState.pickedUpItems = undefined;
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    }
  }

  getRobotState(): RobotState {
    return this.robotState;
  }

  private async executeNode(node: ProgramNodeInstance): Promise<void> {
    console.log(`üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–¥—ã: ${node.nodeType}, ID: ${node.id}`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    if (node.functionId) {
      console.log(`üì¶ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: ${node.functionId}`);
      await this.executeFunction(node.functionId);
      return;
    }
    
    const nodeDef = NODE_DEFINITIONS[node.nodeType];
    
    if (!nodeDef) {
      throw new Error(`Unknown node type: ${node.nodeType}`);
    }
    
    this.emit({
      type: 'nodeStart',
      nodeId: node.id,
      nodeType: node.nodeType,
    });
    
    console.log(`üéØ Switch case –¥–ª—è: ${node.nodeType}`);
    
    switch (node.nodeType) {
      case 'moveForward':
        await this.executeMoveForward();
        break;
      case 'moveBackward':
        await this.executeMoveBackward();
        break;
      case 'turnLeft':
        await this.executeTurnLeft();
        break;
      case 'turnRight':
        await this.executeTurnRight();
        break;
      case 'pickUp':
        await this.executePickUp();
        break;
      case 'putDown':
        await this.executePutDown();
        break;
      // –ö–æ–º–∞–Ω–¥—ã –∏–∑ CustomActionNode
      case 'take':
        await this.executePickUp();
        break;
      case 'put':
        await this.executePutDown();
        break;
      case 'activate':
        await this.executeActivate();
        break;
      case 'scan':
        await this.executeScan();
        break;
      case 'repair':
        await this.executeRepair();
        break;
      case 'build':
        await this.executeBuild();
        break;
      case 'destroy':
        await this.executeDestroy();
        break;
      case 'open':
        await this.executeOpen();
        break;
      case 'close':
        await this.executeClose();
        break;
      case 'use':
        await this.executeUse();
        break;
      case 'wait':
        await this.executeWait(node.parameters?.seconds || 1);
        break;
      case 'log':
        await this.executeLog(node.parameters?.message || '');
        break;
      case 'repeat':
        await this.executeRepeat(node);
        break;
      case 'repeatWhile':
        await this.executeRepeatWhile(node);
        break;
      case 'if':
        await this.executeIf(node);
        break;
      default:
        throw new Error(`Unimplemented node type: ${node.nodeType}`);
    }

    // –†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏
    this.robotState.energy -= nodeDef.energyCost;
    if (this.robotState.energy < 0) {
      throw new Error('–ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞!');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞—Å—Ö–æ–¥–∞ —ç–Ω–µ—Ä–≥–∏–∏
    this.emit({
      type: 'stateChange',
      newState: this.robotState,
    });

    this.emit({
      type: 'nodeComplete',
      nodeId: node.id,
      nodeType: node.nodeType,
    });

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const duration = typeof nodeDef.duration === 'number' ? nodeDef.duration : 1000;
    await this.sleep(duration);
  }

  private canMoveTo(x: number, y: number): boolean {
    if (!this.mission) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –º–∏—Å—Å–∏–∏, –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ–ª—è
    if (x < 0 || y < 0 || x >= this.mission.grid.width || y >= this.mission.grid.height) {
      console.log(`üö´ –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è: [${x}, ${y}], —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è: ${this.mission.grid.width}x${this.mission.grid.height}`);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π (obstacle –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ, –∫—Ä–æ–º–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π)
    const blockingObstacle = this.mission.objects.find(obj => {
      if (obj.type === 'obstacle' && obj.position[0] === x && obj.position[1] === y) {
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–≤–µ—Ä—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –æ–Ω–∞
        if (obj.properties?.isDoor) {
          const isBlocked = !obj.properties.isOpen;
          console.log(`üö™ –î–≤–µ—Ä—å –Ω–∞ [${x}, ${y}]: ${obj.properties.isOpen ? '–æ—Ç–∫—Ä—ã—Ç–∞' : '–∑–∞–∫—Ä—ã—Ç–∞'}`);
          return isBlocked;
        }
        // –û–±—ã—á–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ - –≤—Å–µ–≥–¥–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç
        console.log(`üß± –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞ [${x}, ${y}]`);
        return true;
      }
      return false;
    });

    if (blockingObstacle) {
      console.log(`‚ùå –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ [${x}, ${y}] –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–º:`, blockingObstacle);
      return false;
    }

    console.log(`‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ [${x}, ${y}] —Ä–∞–∑—Ä–µ—à–µ–Ω–æ`);
    return true;
  }

  private async executeMoveForward(): Promise<void> {
    const [x, y] = this.robotState.position;
    let newX = x;
    let newY = y;

    switch (this.robotState.direction) {
      case 'north':
        newY = y - 1;
        break;
      case 'east':
        newX = x + 1;
        break;
      case 'south':
        newY = y + 1;
        break;
      case 'west':
        newX = x - 1;
        break;
    }

    console.log(`ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥: [${x}, ${y}] -> [${newX}, ${newY}], –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${this.robotState.direction}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    if (!this.canMoveTo(newX, newY)) {
      console.error(`‚ùå –ü—É—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü–æ–∑–∏—Ü–∏—è [${newX}, ${newY}] –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      throw new Error(`–ü—É—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é [${newX}, ${newY}].`);
    }

    this.robotState.position = [newX, newY];
    console.log(`‚úÖ –†–æ–±–æ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ [${newX}, ${newY}]`);
    
    this.emit({
      type: 'stateChange',
      newState: { position: [newX, newY] },
    });
  }

  private async executeMoveBackward(): Promise<void> {
    const [x, y] = this.robotState.position;
    let newX = x;
    let newY = y;

    switch (this.robotState.direction) {
      case 'north':
        newY = y + 1;
        break;
      case 'east':
        newX = x - 1;
        break;
      case 'south':
        newY = y - 1;
        break;
      case 'west':
        newX = x + 1;
        break;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    if (!this.canMoveTo(newX, newY)) {
      throw new Error('–ü—É—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞–∑–∞–¥.');
    }

    this.robotState.position = [newX, newY];
    this.emit({
      type: 'stateChange',
      newState: { position: [newX, newY] },
    });
  }

  private async executeTurnLeft(): Promise<void> {
    const directions: Direction[] = ['north', 'west', 'south', 'east'];
    const currentIndex = directions.indexOf(this.robotState.direction);
    const newDirection = directions[(currentIndex + 1) % 4];

    console.log(`üîÑ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ: ${this.robotState.direction} -> ${newDirection}`);
    
    this.robotState.direction = newDirection;
    this.emit({
      type: 'stateChange',
      newState: { direction: newDirection },
    });
  }

  private async executeTurnRight(): Promise<void> {
    const directions: Direction[] = ['north', 'east', 'south', 'west'];
    const currentIndex = directions.indexOf(this.robotState.direction);
    const newDirection = directions[(currentIndex + 1) % 4];

    console.log(`üîÑ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ: ${this.robotState.direction} -> ${newDirection}`);
    
    this.robotState.direction = newDirection;
    this.emit({
      type: 'stateChange',
      newState: { direction: newDirection },
    });
  }

  private async executePickUp(): Promise<void> {
    if (!this.mission) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏');
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const objectIndex = this.mission.objects.findIndex(obj => 
      (obj.type === 'resource' || obj.type === 'container') &&
      obj.position[0] === x && 
      obj.position[1] === y
    );

    if (objectIndex === -1) {
      throw new Error('–ó–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤–∑—è—Ç–∏—è!');
    }

    const object = this.mission.objects[objectIndex];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    this.robotState.inventory.push(object.id || object.type);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑—è—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!this.robotState.pickedUpItems) {
      this.robotState.pickedUpItems = [];
    }
    this.robotState.pickedUpItems.push(object.id || object.type);
    
    // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è
    this.mission.objects.splice(objectIndex, 1);
    
    this.emit({
      type: 'stateChange',
      newState: { inventory: [...this.robotState.inventory] },
    });
    
    console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –≤–∑—è—Ç:', object.type, object.id);
  }

  private async executePutDown(): Promise<void> {
    if (!this.mission) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏');
    }

    if (this.robotState.inventory.length === 0) {
      throw new Error('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ –ø–æ–ª–æ–∂–∏—Ç—å.');
    }

    const [x, y] = this.robotState.position;
    console.log(`üì¶ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${x}, ${y}]`);
    console.log(`üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:`, this.robotState.inventory);
    
    const itemId = this.robotState.inventory.pop()!;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–∞–∑–∞/—Ü–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    console.log(`üîç –ü–æ–∏—Å–∫ –±–∞–∑—ã/—Ü–µ–ª–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${x}, ${y}]`);
    console.log(`üìã –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –º–∏—Å—Å–∏–∏:`, this.mission.objects.map(obj => ({
      type: obj.type,
      id: obj.id,
      position: obj.position
    })));
    
    const targetObject = this.mission.objects.find(obj =>
      (obj.type === 'base' || obj.type === 'goal') &&
      obj.position[0] === x &&
      obj.position[1] === y
    );

    if (targetObject) {
      // –ü—Ä–µ–¥–º–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
      console.log(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${itemId}" –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤:`, targetObject.type, targetObject.id);
      
      // –ü–æ–º–µ—á–∞–µ–º –±–∞–∑—É –∫–∞–∫ –ø–æ–ª—É—á–∏–≤—à—É—é –¥–æ—Å—Ç–∞–≤–∫—É
      if (!targetObject.properties) {
        targetObject.properties = {};
      }
      targetObject.properties.delivered = true;
      targetObject.properties.deliveredItem = itemId;
    } else {
      // –ü—Ä–æ—Å—Ç–æ –∫–ª–∞–¥–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∑–µ–º–ª—é (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø–æ–ª–µ)
      this.mission.objects.push({
        type: 'resource',
        id: itemId,
        position: [x, y],
      });
      console.log(`üì¶ –ü—Ä–µ–¥–º–µ—Ç "${itemId}" –ø–æ–ª–æ–∂–µ–Ω –Ω–∞ –∑–µ–º–ª—é –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${x}, ${y}]`);
    }
    
    this.emit({
      type: 'stateChange',
      newState: { inventory: [...this.robotState.inventory] },
    });
  }

  private async executeWait(seconds: number): Promise<void> {
    await this.sleep(seconds * 1000);
  }

  private async executeFunction(functionId: string): Promise<void> {
    console.log(`üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${functionId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    const func = this.getFunctionById(functionId);
    
    if (!func) {
      throw new Error(`–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${functionId}`);
    }
    
    console.log(`üì¶ –§—É–Ω–∫—Ü–∏—è "${func.name}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${func.body.length} –±–ª–æ–∫–æ–≤`);
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    for (const node of func.body) {
      if (!this.isRunning) break;
      
      while (this.isPaused) {
        await this.sleep(100);
      }
      
      await this.executeNode(node);
    }
    
    console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è "${func.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
  }

  private async executeRepeat(node: ProgramNodeInstance): Promise<void> {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: count (–∏–∑ GraphConverter) –∏ times (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const times = node.parameters?.count || node.parameters?.times || 3;
    console.log(`üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å ${times} —Ä–∞–∑ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, node.parameters, ')');

    for (let i = 0; i < times; i++) {
      if (!this.isRunning) break;

      console.log(`üîÅ –ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}/${times}`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
      const children = node.children || [];
      for (const child of children) {
        if (!this.isRunning) break;

        while (this.isPaused) {
          await this.sleep(100);
        }

        await this.executeNode(child);
      }
    }

    console.log(`‚úÖ –¶–∏–∫–ª repeat –∑–∞–≤–µ—Ä—à–µ–Ω`);
  }

  private async executeRepeatWhile(node: ProgramNodeInstance): Promise<void> {
    const condition = node.parameters?.condition || 'energy > 50';
    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–∫–∞: ${condition}`);

    let iterations = 0;
    const maxIterations = 1000; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    let shouldExit = false; // –§–ª–∞–≥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞

    while (this.isRunning && iterations < maxIterations && !shouldExit) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ü–ï–†–ï–î –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
      const conditionResult = this.evaluateCondition(condition);
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è "${condition}": ${conditionResult}, —ç–Ω–µ—Ä–≥–∏—è: ${this.robotState.energy}`);

      if (!conditionResult) {
        console.log(`üîÑ –£—Å–ª–æ–≤–∏–µ —Å—Ç–∞–ª–æ –ª–æ–∂–Ω—ã–º, –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞`);
        break;
      }

      iterations++;
      console.log(`üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${iterations}`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
      const children = node.children || [];
      for (const child of children) {
        if (!this.isRunning) {
          shouldExit = true;
          break;
        }

        while (this.isPaused) {
          await this.sleep(100);
        }

        await this.executeNode(child);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ü–û–°–õ–ï –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
        const conditionAfter = this.evaluateCondition(condition);
        console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ "${child.nodeType}": ${conditionAfter}, —ç–Ω–µ—Ä–≥–∏—è: ${this.robotState.energy}`);
        
        if (!conditionAfter) {
          console.log(`üîÑ –£—Å–ª–æ–≤–∏–µ —Å—Ç–∞–ª–æ –ª–æ–∂–Ω—ã–º –ø–æ—Å–ª–µ –±–ª–æ–∫–∞, –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞`);
          shouldExit = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–º–µ—Å—Ç–æ return
          break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ for
        }
      }
    }

    if (iterations >= maxIterations) {
      console.warn(`‚ö†Ô∏è –¶–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–Ω: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π (${maxIterations})`);
    }

    console.log(`‚úÖ –¶–∏–∫–ª repeatWhile –∑–∞–≤–µ—Ä—à–µ–Ω (${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)`);
  }

  private async executeIf(node: ProgramNodeInstance): Promise<void> {
    const condition = node.parameters?.condition || 'energy > 50';
    console.log(`‚ùì –ï—Å–ª–∏: ${condition}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
    const conditionResult = this.evaluateCondition(condition);
    console.log(`‚ùì –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ª–æ–≤–∏—è "${condition}": ${conditionResult}`);

    if (conditionResult) {
      // –í—ã–ø–æ–ª–Ω—è–µ–º TRUE –≤–µ—Ç–∫—É (children)
      const children = node.children || [];
      console.log(`‚úÖ –£—Å–ª–æ–≤–∏–µ TRUE, –≤—ã–ø–æ–ª–Ω—è–µ–º ${children.length} –Ω–æ–¥`);
      for (const child of children) {
        if (!this.isRunning) break;

        while (this.isPaused) {
          await this.sleep(100);
        }

        await this.executeNode(child);
      }
    } else {
      // –í—ã–ø–æ–ª–Ω—è–µ–º FALSE –≤–µ—Ç–∫—É (elseBranch)
      const elseBranch = node.elseBranch || [];
      console.log(`‚ùå –£—Å–ª–æ–≤–∏–µ FALSE, –≤—ã–ø–æ–ª–Ω—è–µ–º ${elseBranch.length} –Ω–æ–¥`);
      for (const child of elseBranch) {
        if (!this.isRunning) break;

        while (this.isPaused) {
          await this.sleep(100);
        }

        await this.executeNode(child);
      }
    }

    console.log(`‚úÖ –£—Å–ª–æ–≤–∏–µ if –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
  }

  private evaluateCondition(condition: string): boolean {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (condition === 'canMoveForward') {
        return this.canMoveForward();
      }
      if (condition === 'isDoorAhead') {
        return this.isDoorAhead();
      }
      if (condition === 'isDoorOpen') {
        return this.isDoorOpen();
      }
      if (condition === 'hasItem') {
        return this.robotState.inventory.length > 0;
      }
      if (condition === 'inventoryFull') {
        return this.robotState.inventory.length >= 5;
      }
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —É—Å–ª–æ–≤–∏–π
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: >, <, >=, <=, ==, !=
      
      // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
      let expr = condition
        .replace(/energy/g, this.robotState.energy.toString())
        .replace(/inventorySize/g, this.robotState.inventory.length.toString());

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (–≤–∫–ª—é—á–∞—è –¥—Ä–æ–±–Ω—ã–µ), –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
      if (!/^[\d.\s><=!&|()]+$/.test(expr)) {
        console.warn(`‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: ${condition}`);
        return false;
      }

      // –ó–∞–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞ JavaScript
      expr = expr
        .replace(/==/g, '===')
        .replace(/!=/g, '!==');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Function –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
      const result = new Function(`return ${expr}`)();
      return Boolean(result);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è "${condition}":`, error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥
  private canMoveForward(): boolean {
    if (!this.mission) return false;
    
    const [x, y] = this.robotState.position;
    const direction = this.robotState.direction;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
    let nextX = x;
    let nextY = y;
    
    switch (direction) {
      case 'north': nextY -= 1; break;
      case 'south': nextY += 1; break;
      case 'east': nextX += 1; break;
      case 'west': nextX -= 1; break;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    if (nextX < 0 || nextX >= this.mission.grid.width || 
        nextY < 0 || nextY >= this.mission.grid.height) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    const obstacle = this.mission.objects.find(
      obj => obj.type === 'obstacle' && 
             obj.position[0] === nextX && 
             obj.position[1] === nextY
    );
    
    if (obstacle) {
      // –ï—Å–ª–∏ —ç—Ç–æ –¥–≤–µ—Ä—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –æ–Ω–∞
      if (obstacle.properties?.isDoor) {
        return obstacle.properties?.isOpen === true;
      }
      return false;
    }
    
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–≤–µ—Ä—å –≤–ø–µ—Ä–µ–¥–∏
  private isDoorAhead(): boolean {
    if (!this.mission) return false;
    
    const [x, y] = this.robotState.position;
    const direction = this.robotState.direction;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
    let nextX = x;
    let nextY = y;
    
    switch (direction) {
      case 'north': nextY -= 1; break;
      case 'south': nextY += 1; break;
      case 'east': nextX += 1; break;
      case 'west': nextX -= 1; break;
    }
    
    // –ò—â–µ–º –¥–≤–µ—Ä—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const door = this.mission.objects.find(
      obj => obj.properties?.isDoor === true &&
             obj.position[0] === nextX && 
             obj.position[1] === nextY
    );
    
    return door !== undefined;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –¥–≤–µ—Ä—å –≤–ø–µ—Ä–µ–¥–∏
  private isDoorOpen(): boolean {
    if (!this.mission) return false;
    
    const [x, y] = this.robotState.position;
    const direction = this.robotState.direction;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
    let nextX = x;
    let nextY = y;
    
    switch (direction) {
      case 'north': nextY -= 1; break;
      case 'south': nextY += 1; break;
      case 'east': nextX += 1; break;
      case 'west': nextX -= 1; break;
    }
    
    // –ò—â–µ–º –¥–≤–µ—Ä—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const door = this.mission.objects.find(
      obj => obj.properties?.isDoor === true &&
             obj.position[0] === nextX && 
             obj.position[1] === nextY
    );
    
    if (!door) return false;
    
    return door.properties?.isOpen === true;
  }

  private async executeLog(message: string): Promise<void> {
    if (!this.mission) {
      console.log(`[Robot Log]: ${message}`);
      return;
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º —Å—Ç–∞–Ω—Ü–∏—é/–º–∞—è–∫ –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const station = this.mission.objects.find(obj =>
      obj.type === 'station' &&
      obj.position[0] === x &&
      obj.position[1] === y
    );

    if (station) {
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—è–∫/—Å—Ç–∞–Ω—Ü–∏—é
      if (!station.properties) {
        station.properties = {};
      }
      station.properties.activated = true;
      station.properties.message = message;
      
      console.log(`üì° –ú–∞—è–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log(`[Robot Log]: ${message}`);
    }
  }

  // –ö–æ–º–∞–Ω–¥—ã –∏–∑ CustomActionNode
  private async executeActivate(): Promise<void> {
    if (!this.mission) {
      console.log('‚ö° –ê–∫—Ç–∏–≤–∞—Ü–∏—è (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —Ä—è–¥–æ–º
    const targetObject = this.mission.objects.find(obj =>
      (obj.type === 'station' || obj.type === 'terminal' || obj.type === 'door') &&
      Math.abs(obj.position[0] - x) <= 1 &&
      Math.abs(obj.position[1] - y) <= 1
    );

    if (targetObject) {
      if (!targetObject.properties) {
        targetObject.properties = {};
      }
      targetObject.properties.activated = true;
      
      console.log(`‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç: ${targetObject.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${targetObject.position}]`);
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—è–¥–æ–º');
    }
  }

  private async executeScan(): Promise<void> {
    if (!this.mission) {
      console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ [${x}, ${y}]`);
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–ª–µ—Ç–æ–∫
    const nearbyObjects = this.mission.objects.filter(obj =>
      Math.abs(obj.position[0] - x) <= 2 &&
      Math.abs(obj.position[1] - y) <= 2
    );

    console.log(`üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${nearbyObjects.length}`);
    nearbyObjects.forEach(obj => {
      console.log(`  - ${obj.type} –Ω–∞ [${obj.position}]`);
    });
  }

  private async executeRepair(): Promise<void> {
    if (!this.mission) {
      console.log('üîß –†–µ–º–æ–Ω—Ç (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ä—è–¥–æ–º
    const targetObject = this.mission.objects.find(obj =>
      obj.properties?.damaged &&
      Math.abs(obj.position[0] - x) <= 1 &&
      Math.abs(obj.position[1] - y) <= 1
    );

    if (targetObject && targetObject.properties) {
      targetObject.properties.damaged = false;
      targetObject.properties.repaired = true;
      
      console.log(`üîß –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç: ${targetObject.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${targetObject.position}]`);
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä—è–¥–æ–º');
    }
  }

  private async executeBuild(): Promise<void> {
    console.log('üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ (–∑–∞–≥–ª—É—à–∫–∞)');
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  private async executeDestroy(): Promise<void> {
    if (!this.mission) {
      console.log('üí• –†–∞–∑—Ä—É—à–µ–Ω–∏–µ (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º —Ä–∞–∑—Ä—É—à–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç —Ä—è–¥–æ–º
    const targetIndex = this.mission.objects.findIndex(obj =>
      obj.properties?.destructible &&
      Math.abs(obj.position[0] - x) <= 1 &&
      Math.abs(obj.position[1] - y) <= 1
    );

    if (targetIndex !== -1) {
      const targetObject = this.mission.objects[targetIndex];
      this.mission.objects.splice(targetIndex, 1);
      
      console.log(`üí• –†–∞–∑—Ä—É—à–µ–Ω –æ–±—ä–µ–∫—Ç: ${targetObject.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${targetObject.position}]`);
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä—É—à–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä—è–¥–æ–º');
    }
  }

  private async executeOpen(): Promise<void> {
    if (!this.mission) {
      console.log('üö™ –û—Ç–∫—Ä—ã—Ç–∏–µ (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    const direction = this.robotState.direction;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–ø–µ—Ä–µ–¥–∏
    let nextX = x;
    let nextY = y;
    
    switch (direction) {
      case 'north': nextY -= 1; break;
      case 'south': nextY += 1; break;
      case 'east': nextX += 1; break;
      case 'west': nextX -= 1; break;
    }
    
    // –ò—â–µ–º –¥–≤–µ—Ä—å –≤–ø–µ—Ä–µ–¥–∏
    const door = this.mission.objects.find(obj =>
      obj.properties?.isDoor === true &&
      obj.position[0] === nextX &&
      obj.position[1] === nextY
    );

    if (door) {
      if (!door.properties) {
        door.properties = {};
      }
      door.properties.isOpen = true;
      
      console.log(`üö™ –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${door.position}]`);
      
      // –í–ê–ñ–ù–û: –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–≤–µ—Ä–∏ –≤–ø–µ—Ä–µ–¥–∏');
    }
  }

  private async executeClose(): Promise<void> {
    if (!this.mission) {
      console.log('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –¥–≤–µ—Ä—å —Ä—è–¥–æ–º
    const door = this.mission.objects.find(obj =>
      obj.type === 'door' &&
      obj.properties?.open &&
      Math.abs(obj.position[0] - x) <= 1 &&
      Math.abs(obj.position[1] - y) <= 1
    );

    if (door && door.properties) {
      door.properties.open = false;
      
      console.log(`üîí –î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${door.position}]`);
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π —Ä—è–¥–æ–º');
    }
  }

  private async executeUse(): Promise<void> {
    if (!this.mission) {
      console.log('üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–Ω–µ—Ç –º–∏—Å—Å–∏–∏)');
      return;
    }

    const [x, y] = this.robotState.position;
    
    // –ò—â–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ä—è–¥–æ–º
    const targetObject = this.mission.objects.find(obj =>
      (obj.type === 'terminal' || obj.type === 'lever' || obj.type === 'button') &&
      Math.abs(obj.position[0] - x) <= 1 &&
      Math.abs(obj.position[1] - y) <= 1
    );

    if (targetObject) {
      if (!targetObject.properties) {
        targetObject.properties = {};
      }
      targetObject.properties.used = true;
      
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç: ${targetObject.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${targetObject.position}]`);
      
      this.emit({
        type: 'stateChange',
        newState: this.robotState,
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä—è–¥–æ–º');
    }
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
