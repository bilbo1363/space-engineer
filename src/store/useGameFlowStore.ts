import { create } from 'zustand';
import { GameStage, GameFlowState, GameFlowActions, ExecutionResult } from '../types/gameFlow';
import { Mission } from '../types/missions';
import { ProgramNodeInstance } from '../types/nodes';
import { ProgramGraph } from '../types/flowGraph';

type GameFlowStore = GameFlowState & GameFlowActions & {
  initialMission: Mission | null; // –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Å—Å–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞
  resetMissionToInitial: () => void;
  updateMission: (mission: Mission) => void; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
};

export const useGameFlowStore = create<GameFlowStore>((set, get) => ({
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  stage: 'briefing',
  mission: null,
  initialMission: null,
  program: [],
  programGraph: null,
  executionResult: null,

  // –î–µ–π—Å—Ç–≤–∏—è
  setStage: (stage: GameStage) => set({ stage }),

  startMission: (mission: Mission) => {
    // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–∏—Å—Å–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const missionCopy = JSON.parse(JSON.stringify(mission));
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞
    const initialMissionCopy = JSON.parse(JSON.stringify(mission));
    set({
      mission: missionCopy,
      initialMission: initialMissionCopy,
      stage: 'briefing',
      program: [],
      programGraph: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –º–∏—Å—Å–∏–∏
      executionResult: null,
    });
  },

  resetMissionToInitial: () => {
    const { initialMission } = get();
    if (initialMission) {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏—Å—Å–∏—é –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const restoredMission = JSON.parse(JSON.stringify(initialMission));
      set({ mission: restoredMission });
      console.log('üîÑ –ú–∏—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é');
    }
  },

  updateMission: (mission: Mission) => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∏—Å—Å–∏—é –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
    set({ mission: { ...mission, objects: [...mission.objects] } });
  },

  setProgram: (program: ProgramNodeInstance[]) => set({ program }),

  setProgramGraph: (graph: ProgramGraph) => set({ programGraph: graph }),

  setExecutionResult: (result: ExecutionResult) => set({ executionResult: result }),

  resetFlow: () => set({
    stage: 'briefing',
    mission: null,
    program: [],
    programGraph: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    executionResult: null,
  }),

  goToBriefing: () => set({ stage: 'briefing' }),

  goToProgramming: () => set({ stage: 'programming' }),

  goToExecution: () => set({ stage: 'execution' }),

  goToResult: (result: ExecutionResult) => set({
    stage: 'result',
    executionResult: result,
  }),
}));
