import { useRef, useEffect, useState } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Grid, PerspectiveCamera } from '@react-three/drei';
import { Group, Vector3 } from 'three';
import { useGameStore } from '../../store/useGameStore';
import { useGameFlowStore } from '../../store/useGameFlowStore';
import { Direction } from '../../types/nodes';

export const GameScene = () => {
  const { robotState } = useGameStore();
  const { mission } = useGameFlowStore();
  const [updateCounter, setUpdateCounter] = useState(0);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ robotState –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
  useEffect(() => {
    console.log('üîÑ GameScene: robotState –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫', robotState);
    setUpdateCounter(prev => prev + 1);
  }, [robotState]);

  if (!mission) return null;

  const gridSize = mission.grid;
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const stateKey = `${robotState.position.join('-')}-${robotState.direction}-${updateCounter}`;

  return (
    <div className="w-full h-full">
      <Canvas shadows>
        {/* –ö–∞–º–µ—Ä–∞ */}
        <PerspectiveCamera makeDefault position={[gridSize.width * 0.8, gridSize.height * 1.2, gridSize.width * 0.8]} fov={60} />
        
        {/* –û—Å–≤–µ—â–µ–Ω–∏–µ */}
        <ambientLight intensity={0.5} />
        <directionalLight
          position={[10, 10, 5]}
          intensity={1}
          castShadow
          shadow-mapSize-width={2048}
          shadow-mapSize-height={2048}
        />
        <pointLight position={[-10, 10, -10]} intensity={0.3} />

        {/* –°–µ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è */}
        <Grid
          args={[gridSize.width, gridSize.height]}
          cellSize={1}
          cellThickness={1}
          cellColor="#00FFFF"
          sectionSize={Math.max(gridSize.width, gridSize.height)}
          sectionThickness={1.5}
          sectionColor="#FF8C00"
          fadeDistance={50}
          fadeStrength={1}
          followCamera={false}
          infiniteGrid={false}
          position={[(gridSize.width - 1) / 2, 0, (gridSize.height - 1) / 2]}
        />

        {/* –ü–æ–ª */}
        <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[(gridSize.width - 1) / 2, -0.01, (gridSize.height - 1) / 2]}>
          <planeGeometry args={[gridSize.width, gridSize.height]} />
          <meshStandardMaterial color="#0A0E2E" />
        </mesh>

        {/* –í–∏–∑—É–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è (—Å—Ç–µ–Ω—ã) */}
        {/* –°–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–µ–Ω–∞ (y = -0.5) */}
        <mesh position={[(gridSize.width - 1) / 2, 0.5, -0.5]} castShadow>
          <boxGeometry args={[gridSize.width, 1, 0.1]} />
          <meshStandardMaterial color="#FF0000" transparent opacity={0.3} />
        </mesh>
        
        {/* –Æ–∂–Ω–∞—è —Å—Ç–µ–Ω–∞ (y = height - 0.5) */}
        <mesh position={[(gridSize.width - 1) / 2, 0.5, gridSize.height - 0.5]} castShadow>
          <boxGeometry args={[gridSize.width, 1, 0.1]} />
          <meshStandardMaterial color="#FF0000" transparent opacity={0.3} />
        </mesh>
        
        {/* –ó–∞–ø–∞–¥–Ω–∞—è —Å—Ç–µ–Ω–∞ (x = -0.5) */}
        <mesh position={[-0.5, 0.5, (gridSize.height - 1) / 2]} castShadow>
          <boxGeometry args={[0.1, 1, gridSize.height]} />
          <meshStandardMaterial color="#FF0000" transparent opacity={0.3} />
        </mesh>
        
        {/* –í–æ—Å—Ç–æ—á–Ω–∞—è —Å—Ç–µ–Ω–∞ (x = width - 0.5) */}
        <mesh position={[gridSize.width - 0.5, 0.5, (gridSize.height - 1) / 2]} castShadow>
          <boxGeometry args={[0.1, 1, gridSize.height]} />
          <meshStandardMaterial color="#FF0000" transparent opacity={0.3} />
        </mesh>

        {/* –†–æ–±–æ—Ç */}
        <Robot
          position={robotState.position}
          direction={robotState.direction}
        />

        {/* –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –æ–±—ä–µ–∫—Ç—ã –º–∏—Å—Å–∏–∏ */}
        {mission.objects.map((obj, index) => (
          <GameObject key={`${index}-${stateKey}`} object={obj} />
        ))}

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π */}
        <OrbitControls
          target={[(gridSize.width - 1) / 2, 0, (gridSize.height - 1) / 2]}
          enablePan={false}
          minPolarAngle={Math.PI / 6}
          maxPolarAngle={Math.PI / 2.5}
          minDistance={5}
          maxDistance={20}
        />
      </Canvas>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –º–∏—Å—Å–∏–∏
const GameObject = ({ object }: { object: any }) => {
  const [x, z] = object.position;
  
  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–ª–µ—Ç–∫–∞—Ö
  const position: [number, number, number] = [x + 0.5, 0.5, z + 0.5];

  switch (object.type) {
    case 'obstacle':
      // –ï—Å–ª–∏ —ç—Ç–æ –¥–≤–µ—Ä—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (object.properties?.isDoor) {
        const isOpen = object.properties.isOpen;
        console.log('üö™ GameObject —Ä–µ–Ω–¥–µ—Ä–∏—Ç –¥–≤–µ—Ä—å:', { 
          position: object.position, 
          isOpen, 
          properties: object.properties 
        });
        return (
          <mesh position={position} rotation={[0, Math.PI / 2, 0]} castShadow>
            <boxGeometry args={[0.8, 1.5, 0.2]} />
            <meshStandardMaterial 
              color={isOpen ? "#00FF00" : "#FF0000"}
              transparent={isOpen}
              opacity={isOpen ? 0.3 : 1}
              emissive={isOpen ? "#00FF00" : "#FF0000"}
              emissiveIntensity={isOpen ? 0.5 : 0.2}
            />
          </mesh>
        );
      }
      
      // –û–±—ã—á–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
      return (
        <mesh position={position} castShadow>
          <boxGeometry args={[0.8, 1, 0.8]} />
          <meshStandardMaterial color="#666666" />
        </mesh>
      );
    
    case 'goal':
      return (
        <mesh position={position}>
          <cylinderGeometry args={[0.3, 0.3, 1.5, 8]} />
          <meshStandardMaterial color="#4CAF50" emissive="#4CAF50" emissiveIntensity={0.5} />
        </mesh>
      );
    
    case 'container':
      return (
        <mesh position={position} castShadow>
          <boxGeometry args={[0.6, 0.6, 0.6]} />
          <meshStandardMaterial color="#FF8C00" />
        </mesh>
      );
    
    case 'base':
      return (
        <mesh position={position}>
          <cylinderGeometry args={[0.7, 0.7, 0.3, 6]} />
          <meshStandardMaterial color="#00FFFF" emissive="#00FFFF" emissiveIntensity={0.3} />
        </mesh>
      );
    
    case 'resource':
      return (
        <mesh position={position}>
          <octahedronGeometry args={[0.3]} />
          <meshStandardMaterial color="#FFD700" emissive="#FFD700" emissiveIntensity={0.5} />
        </mesh>
      );
    
    case 'station':
      // –ú–∞—è–∫/—Å—Ç–∞–Ω—Ü–∏—è - —Å–≤–µ—Ç—è—â–∏–π—Å—è –∫—Ä–∏—Å—Ç–∞–ª–ª –Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ
      const isActivated = object.properties?.activated;
      return (
        <group position={position}>
          {/* –ü–æ–¥—Å—Ç–∞–≤–∫–∞ */}
          <mesh position={[0, -0.3, 0]}>
            <cylinderGeometry args={[0.3, 0.4, 0.2, 8]} />
            <meshStandardMaterial color="#444444" />
          </mesh>
          {/* –ö—Ä–∏—Å—Ç–∞–ª–ª */}
          <mesh position={[0, 0.2, 0]}>
            <octahedronGeometry args={[0.4]} />
            <meshStandardMaterial 
              color={isActivated ? "#00FF00" : "#FF8C00"}
              emissive={isActivated ? "#00FF00" : "#FF8C00"}
              emissiveIntensity={isActivated ? 1 : 0.5}
            />
          </mesh>
          {/* –°–≤–µ—Ç–æ–≤–æ–π –ª—É—á –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω */}
          {isActivated && (
            <mesh position={[0, 1.5, 0]}>
              <cylinderGeometry args={[0.1, 0.05, 2, 8]} />
              <meshStandardMaterial 
                color="#00FF00"
                transparent
                opacity={0.5}
                emissive="#00FF00"
                emissiveIntensity={0.8}
              />
            </mesh>
          )}
        </group>
      );
    
    default:
      return null;
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–æ–±–æ—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
interface RobotProps {
  position: [number, number];
  direction: Direction;
}

const Robot = ({ position, direction }: RobotProps) => {
  const groupRef = useRef<Group>(null);
  const targetPosition = useRef(new Vector3());
  const targetRotation = useRef(0);
  const currentRotation = useRef(0);

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
  const directionToRotation = (dir: Direction): number => {
    switch (dir) {
      case 'north': return 0;
      case 'east': return -Math.PI / 2;
      case 'south': return Math.PI;
      case 'west': return Math.PI / 2;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ props
  useEffect(() => {
    const [x, z] = position;
    targetPosition.current.set(x + 0.5, 0.5, z + 0.5);
    targetRotation.current = directionToRotation(direction);
  }, [position, direction]);

  // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
  useFrame(() => {
    if (!groupRef.current) return;

    // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    groupRef.current.position.lerp(targetPosition.current, 0.1);

    // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∫ —Ü–µ–ª–µ–≤–æ–º—É —É–≥–ª—É
    const rotationDiff = targetRotation.current - currentRotation.current;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã —É–≥–ª–æ–≤
    let normalizedDiff = rotationDiff;
    if (Math.abs(rotationDiff) > Math.PI) {
      normalizedDiff = rotationDiff > 0 
        ? rotationDiff - 2 * Math.PI 
        : rotationDiff + 2 * Math.PI;
    }

    currentRotation.current += normalizedDiff * 0.1;
    groupRef.current.rotation.y = currentRotation.current;
  });

  return (
    <group ref={groupRef}>
      {/* –¢–µ–ª–æ —Ä–æ–±–æ—Ç–∞ */}
      <mesh castShadow position={[0, 0, 0]}>
        <boxGeometry args={[0.6, 0.6, 0.6]} />
        <meshStandardMaterial color="#2196F3" metalness={0.3} roughness={0.7} />
      </mesh>

      {/* –ì–æ–ª–æ–≤–∞/–∞–Ω—Ç–µ–Ω–Ω–∞ */}
      <mesh castShadow position={[0, 0.5, 0]}>
        <cylinderGeometry args={[0.1, 0.1, 0.4, 8]} />
        <meshStandardMaterial color="#00FFFF" emissive="#00FFFF" emissiveIntensity={0.5} />
      </mesh>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–æ–Ω—É—Å —Å–ø–µ—Ä–µ–¥–∏) */}
      <mesh castShadow position={[0, 0, -0.4]} rotation={[-Math.PI / 2, 0, 0]}>
        <coneGeometry args={[0.15, 0.3, 8]} />
        <meshStandardMaterial color="#FF8C00" />
      </mesh>

      {/* –ö–æ–ª–µ—Å–∞ */}
      <mesh castShadow position={[-0.25, -0.2, 0.2]}>
        <cylinderGeometry args={[0.15, 0.15, 0.1, 16]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
      <mesh castShadow position={[0.25, -0.2, 0.2]}>
        <cylinderGeometry args={[0.15, 0.15, 0.1, 16]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
      <mesh castShadow position={[-0.25, -0.2, -0.2]}>
        <cylinderGeometry args={[0.15, 0.15, 0.1, 16]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
      <mesh castShadow position={[0.25, -0.2, -0.2]}>
        <cylinderGeometry args={[0.15, 0.15, 0.1, 16]} />
        <meshStandardMaterial color="#333333" />
      </mesh>

      {/* –°–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≥–ª–∞–∑–∞) - –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∫ –∫–æ–Ω—É—Å—É */}
      <mesh position={[0.15, 0.1, -0.35]}>
        <sphereGeometry args={[0.05, 16, 16]} />
        <meshStandardMaterial color="#00FF00" emissive="#00FF00" emissiveIntensity={1} />
      </mesh>
      <mesh position={[-0.15, 0.1, -0.35]}>
        <sphereGeometry args={[0.05, 16, 16]} />
        <meshStandardMaterial color="#00FF00" emissive="#00FF00" emissiveIntensity={1} />
      </mesh>
    </group>
  );
};
