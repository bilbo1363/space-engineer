import { useState } from 'react';
import { useGameStore } from '../../store/useGameStore';
import { ProgramNodeInstance } from '../../types/nodes';
import { NODE_DEFINITIONS } from '../../core/nodes/nodeDefinitions';
import { validateFunction, canDeleteFunction } from '../../utils/functionValidator';

interface FunctionEditorProps {
  functionId: string;
  onClose: () => void;
}

export const FunctionEditor = ({ functionId, onClose }: FunctionEditorProps) => {
  const { getFunctionById, updateFunction, deleteFunction, userFunctions } = useGameStore();
  const func = getFunctionById(functionId);
  
  const [body, setBody] = useState<ProgramNodeInstance[]>(func?.body || []);
  const [dragOverIndex, setDragOverIndex] = useState<number | null>(null);
  const [draggedNodeIndex, setDraggedNodeIndex] = useState<number | null>(null);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);
  const [validationWarnings, setValidationWarnings] = useState<string[]>([]);

  if (!func) {
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div className="bg-deep-blue border border-error-red rounded-lg p-6">
          <p className="text-error-red">–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</p>
          <button onClick={onClose} className="mt-4 px-4 py-2 bg-gray-600 rounded">
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    );
  }

  const handleDragOver = (e: React.DragEvent, index?: number) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (draggedNodeIndex !== null) {
      e.dataTransfer.dropEffect = 'move';
    } else {
      e.dataTransfer.dropEffect = 'copy';
    }
    
    const targetIndex = index !== undefined ? index : body.length;
    setDragOverIndex(targetIndex);
  };

  const handleDragLeave = () => {
    setDragOverIndex(null);
  };

  const handleDrop = (e: React.DragEvent, index?: number) => {
    e.preventDefault();
    e.stopPropagation();
    setDragOverIndex(null);

    const nodeType = e.dataTransfer.getData('nodeType');
    const draggedIndex = e.dataTransfer.getData('draggedIndex');
    
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–¥—ã
    if (draggedIndex !== '') {
      const fromIndex = parseInt(draggedIndex);
      const toIndex = index !== undefined ? index : body.length;
      
      if (fromIndex === toIndex) {
        setDraggedNodeIndex(null);
        return;
      }
      
      const newBody = [...body];
      const [movedNode] = newBody.splice(fromIndex, 1);
      const adjustedToIndex = fromIndex < toIndex ? toIndex - 1 : toIndex;
      newBody.splice(adjustedToIndex, 0, movedNode);
      
      setBody(newBody);
      setDraggedNodeIndex(null);
      return;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã
    if (!nodeType) return;

    const newNode: ProgramNodeInstance = {
      id: `node_${Date.now()}_${Math.random()}`,
      nodeType,
      parameters: {},
    };

    const newBody = [...body];
    const insertIndex = index !== undefined ? index : body.length;
    newBody.splice(insertIndex, 0, newNode);
    setBody(newBody);
  };

  const handleRemoveNode = (index: number) => {
    const newBody = body.filter((_, i) => i !== index);
    setBody(newBody);
  };

  const handleSave = () => {
    if (!func) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const tempFunc = { ...func, body };
    const validation = validateFunction(tempFunc, userFunctions);

    if (!validation.valid) {
      setValidationErrors(validation.errors);
      setValidationWarnings(validation.warnings);
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    if (validation.warnings.length > 0) {
      setValidationWarnings(validation.warnings);
    }

    updateFunction(functionId, body);
    onClose();
  };

  const handleDelete = () => {
    if (!func) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
    const deleteCheck = canDeleteFunction(functionId, userFunctions);
    
    if (!deleteCheck.canDelete) {
      const usedByList = deleteCheck.usedBy.join(', ');
      alert(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é "${func.name}".\n–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: ${usedByList}`);
      return;
    }

    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é "${func.name}"?`)) {
      deleteFunction(functionId);
      onClose();
    }
  };

  const getNodeIcon = (nodeType: string): string => {
    const node = NODE_DEFINITIONS[nodeType];
    return node?.icon || '‚ùì';
  };

  const getNodeName = (nodeType: string): string => {
    const node = NODE_DEFINITIONS[nodeType];
    return node?.name || nodeType;
  };

  return (
    <div className="flex-1 flex flex-col">
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-3">
            <button
              onClick={onClose}
              className="text-bright-cyan hover:text-white transition-colors"
              title="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ"
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            <div className="flex items-center gap-2">
              <span className="text-2xl">{func.icon}</span>
              <div>
                <h2 className="text-lg font-bold text-bright-cyan">
                  –§—É–Ω–∫—Ü–∏—è: {func.name}
                </h2>
                {func.description && (
                  <p className="text-xs text-gray-400">{func.description}</p>
                )}
              </div>
            </div>
          </div>
          <div className="flex gap-2">
            <button
              onClick={handleDelete}
              className="px-2 py-1 text-sm bg-error-red/20 text-error-red rounded hover:bg-error-red/30 transition-colors"
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
            <button
              onClick={handleSave}
              className="px-3 py-1 text-sm bg-bright-cyan text-deep-blue font-bold rounded hover:bg-bright-cyan/90 transition-colors"
            >
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>

        {/* –¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        <div className="flex-1 overflow-auto">
          <div className="mb-2 text-xs text-gray-400">
            –¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ ({body.length} –±–ª–æ–∫–æ–≤):
          </div>
          
          <div
            className={`
              bg-deep-blue/50 rounded border-2 p-4 overflow-x-auto overflow-y-hidden
              ${dragOverIndex !== null ? 'border-bright-orange' : 'border-bright-cyan/30'}
              ${body.length === 0 ? 'flex items-center justify-center min-h-[150px]' : ''}
            `}
          >
            {body.length === 0 ? (
              <div
                onDragOver={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  e.dataTransfer.dropEffect = 'copy';
                }}
                onDrop={(e) => handleDrop(e)}
                className="w-full h-full flex items-center justify-center"
              >
                <p className="text-gray-400 text-center">
                  –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–ª–æ–∫–∏ —Å—é–¥–∞...
                </p>
              </div>
            ) : (
              <div className="flex items-center gap-2 h-full">
                {body.map((node, index) => (
                  <div key={node.id} className="flex items-center">
                    {/* Drop zone –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ */}
                    <div
                      onDragOver={(e) => handleDragOver(e, index)}
                      onDragLeave={handleDragLeave}
                      onDrop={(e) => handleDrop(e, index)}
                      className={`
                        transition-all flex items-center justify-center
                        ${dragOverIndex === index 
                          ? 'w-20 bg-bright-orange/20 border-2 border-dashed border-bright-orange rounded mx-2 h-32' 
                          : 'w-8 hover:w-16 hover:bg-bright-cyan/10 rounded h-32'
                        }
                      `}
                    >
                      {dragOverIndex === index && (
                        <div className="text-bright-orange text-2xl">
                          ‚¨á
                        </div>
                      )}
                    </div>

                    {/* –ë–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã */}
                    <div
                      draggable
                      onDragStart={(e) => {
                        e.dataTransfer.setData('draggedIndex', index.toString());
                        e.dataTransfer.effectAllowed = 'move';
                        setDraggedNodeIndex(index);
                      }}
                      onDragEnd={() => setDraggedNodeIndex(null)}
                      className={`
                        relative flex flex-col items-center gap-2 p-3 rounded border transition-all group min-w-fit
                        ${draggedNodeIndex === index ? 'opacity-50' : ''}
                        bg-bright-cyan/10 border-bright-cyan/30 hover:bg-bright-cyan/20
                        cursor-move
                      `}
                    >
                      <div className="flex items-center gap-2">
                        <span className="text-bright-orange font-bold">
                          {index + 1}
                        </span>
                      </div>
                      <span className="text-3xl">{getNodeIcon(node.nodeType)}</span>
                      <span className="text-sm whitespace-nowrap">{getNodeName(node.nodeType)}</span>
                      
                      {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ */}
                      {NODE_DEFINITIONS[node.nodeType]?.parameters && (
                        <div className="mt-2 space-y-1" onClick={(e) => e.stopPropagation()}>
                          {NODE_DEFINITIONS[node.nodeType].parameters!.map((param) => (
                            <div key={param.name} className="flex flex-col items-center gap-1">
                              {param.type === 'number' && (
                                <>
                                  <input
                                    type="number"
                                    min={param.min}
                                    max={param.max}
                                    value={node.parameters?.[param.name] ?? param.default}
                                    onChange={(e) => {
                                      e.stopPropagation();
                                      const value = e.target.value === '' ? param.default : parseInt(e.target.value);
                                      const newBody = [...body];
                                      newBody[index] = {
                                        ...node,
                                        parameters: { ...node.parameters, [param.name]: value }
                                      };
                                      setBody(newBody);
                                    }}
                                    onKeyDown={(e) => {
                                      if (['ArrowLeft', 'ArrowRight', 'Backspace', 'Delete', 'Home', 'End', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(e.key)) {
                                        return;
                                      }
                                      e.stopPropagation();
                                    }}
                                    onClick={(e) => e.stopPropagation()}
                                    onMouseDown={(e) => e.stopPropagation()}
                                    className="w-16 px-2 py-1 bg-deep-blue border border-bright-cyan/50 rounded text-white text-xs text-center"
                                  />
                                  <span className="text-xs text-bright-orange">{param.label}</span>
                                </>
                              )}
                              {param.type === 'string' && (
                                <>
                                  <input
                                    type="text"
                                    value={node.parameters?.[param.name] || param.default}
                                    onChange={(e) => {
                                      e.stopPropagation();
                                      const newBody = [...body];
                                      newBody[index] = {
                                        ...node,
                                        parameters: { ...node.parameters, [param.name]: e.target.value }
                                      };
                                      setBody(newBody);
                                    }}
                                    onClick={(e) => e.stopPropagation()}
                                    onMouseDown={(e) => e.stopPropagation()}
                                    placeholder={param.default}
                                    className="w-24 px-2 py-1 bg-deep-blue border border-bright-cyan/50 rounded text-white text-xs"
                                  />
                                  <span className="text-xs text-bright-orange">{param.label}</span>
                                </>
                              )}
                              {param.type === 'expression' && (
                                <>
                                  <input
                                    type="text"
                                    value={node.parameters?.[param.name] || param.default}
                                    onChange={(e) => {
                                      e.stopPropagation();
                                      const newBody = [...body];
                                      newBody[index] = {
                                        ...node,
                                        parameters: { ...node.parameters, [param.name]: e.target.value }
                                      };
                                      setBody(newBody);
                                    }}
                                    onClick={(e) => e.stopPropagation()}
                                    onMouseDown={(e) => e.stopPropagation()}
                                    placeholder={param.default}
                                    className="w-28 px-2 py-1 bg-deep-blue border border-bright-cyan/50 rounded text-white text-xs"
                                  />
                                  <span className="text-xs text-bright-orange">{param.label}</span>
                                </>
                              )}
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                      <button
                        onClick={() => handleRemoveNode(index)}
                        className="absolute -top-2 -right-2 w-6 h-6 bg-error-red text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center text-xs"
                      >
                        ‚úï
                      </button>
                    </div>
                  </div>
                ))}

                {/* Drop zone –≤ –∫–æ–Ω—Ü–µ */}
                <div
                  onDragOver={(e) => handleDragOver(e, body.length)}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, body.length)}
                  className={`
                    transition-all flex items-center justify-center
                    ${dragOverIndex === body.length 
                      ? 'w-20 bg-bright-orange/20 border-2 border-dashed border-bright-orange rounded mx-2 h-32' 
                      : 'w-8 hover:w-16 hover:bg-bright-cyan/10 rounded h-32'
                    }
                  `}
                >
                  {dragOverIndex === body.length && (
                    <div className="text-bright-orange text-2xl">
                      ‚¨á
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
          {validationErrors.length > 0 && (
            <div className="mt-4 p-3 bg-error-red/20 rounded border border-error-red">
              <div className="font-bold text-error-red mb-2">‚ùå –û—à–∏–±–∫–∏:</div>
              {validationErrors.map((error, index) => (
                <div key={index} className="text-sm text-error-red">
                  ‚Ä¢ {error}
                </div>
              ))}
            </div>
          )}

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
          {validationWarnings.length > 0 && (
            <div className="mt-4 p-3 bg-warning-yellow/20 rounded border border-warning-yellow">
              <div className="font-bold text-warning-yellow mb-2">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</div>
              {validationWarnings.map((warning, index) => (
                <div key={index} className="text-sm text-warning-yellow">
                  ‚Ä¢ {warning}
                </div>
              ))}
            </div>
          )}

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
          <div className="mt-4 p-3 bg-bright-cyan/10 rounded border border-bright-cyan/30">
            <p className="text-xs text-gray-300">
              üí° –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–ª–æ–∫–∏ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Å–ª–µ–≤–∞ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
            </p>
          </div>
        </div>

      </div>
    </div>
  );
};
