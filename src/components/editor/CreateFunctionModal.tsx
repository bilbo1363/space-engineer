import { useState } from 'react';
import { useGameStore } from '../../store/useGameStore';

interface CreateFunctionModalProps {
  onClose: () => void;
  onCreated?: (functionId: string) => void;
}

const AVAILABLE_ICONS = ['üì¶', 'üîÑ', 'üè†', '‚öôÔ∏è', 'üéØ', 'üîç', 'üöÄ', '‚≠ê', 'üîß', 'üì°'];
const AVAILABLE_COLORS = ['#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336', '#00BCD4'];

export const CreateFunctionModal = ({ onClose, onCreated }: CreateFunctionModalProps) => {
  const { createFunction } = useGameStore();
  const [name, setName] = useState('');
  const [selectedIcon, setSelectedIcon] = useState(AVAILABLE_ICONS[0]);
  const [selectedColor, setSelectedColor] = useState(AVAILABLE_COLORS[0]);
  const [description, setDescription] = useState('');
  const [error, setError] = useState('');

  const handleCreate = () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }

    if (name.length > 20) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    const functionId = createFunction(name.trim(), selectedIcon, selectedColor, description.trim() || undefined);
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
    if (onCreated) {
      onCreated(functionId);
    }

    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50" onClick={onClose}>
      <div 
        className="bg-deep-blue border border-bright-cyan rounded-lg p-6 w-full max-w-md"
        onClick={(e) => e.stopPropagation()}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-bright-cyan">–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors"
          >
            ‚úï
          </button>
        </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-white mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ *
          </label>
          <input
            type="text"
            value={name}
            onChange={(e) => {
              setName(e.target.value);
              setError('');
            }}
            placeholder="–°–æ–±—Ä–∞—Ç—å–û–±—Ä–∞–∑–µ—Ü"
            className="w-full px-3 py-2 bg-deep-blue border border-bright-cyan/50 rounded text-white placeholder-gray-500 focus:outline-none focus:border-bright-cyan"
            maxLength={20}
            autoFocus
          />
          {error && (
            <div className="text-error-red text-xs mt-1">{error}</div>
          )}
        </div>

        {/* –ò–∫–æ–Ω–∫–∞ */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-white mb-2">
            –ò–∫–æ–Ω–∫–∞
          </label>
          <div className="flex flex-wrap gap-2">
            {AVAILABLE_ICONS.map((icon) => (
              <button
                key={icon}
                onClick={() => setSelectedIcon(icon)}
                className={`
                  text-2xl p-2 rounded border transition-all
                  ${selectedIcon === icon 
                    ? 'border-bright-cyan bg-bright-cyan/20' 
                    : 'border-gray-600 hover:border-bright-cyan/50'
                  }
                `}
              >
                {icon}
              </button>
            ))}
          </div>
        </div>

        {/* –¶–≤–µ—Ç */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-white mb-2">
            –¶–≤–µ—Ç
          </label>
          <div className="flex gap-2">
            {AVAILABLE_COLORS.map((color) => (
              <button
                key={color}
                onClick={() => setSelectedColor(color)}
                className={`
                  w-10 h-10 rounded border-2 transition-all
                  ${selectedColor === color 
                    ? 'border-white scale-110' 
                    : 'border-transparent hover:scale-105'
                  }
                `}
                style={{ backgroundColor: color }}
              />
            ))}
          </div>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-white mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <input
            type="text"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="–°–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –∏ –æ—Ç–Ω–æ—Å–∏—Ç –Ω–∞ –±–∞–∑—É"
            className="w-full px-3 py-2 bg-deep-blue border border-bright-cyan/50 rounded text-white placeholder-gray-500 focus:outline-none focus:border-bright-cyan"
            maxLength={50}
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-3">
          <button
            onClick={onClose}
            className="flex-1 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={handleCreate}
            className="flex-1 px-4 py-2 bg-bright-cyan text-deep-blue font-bold rounded hover:bg-bright-cyan/90 transition-colors"
          >
            –°–æ–∑–¥–∞—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};
