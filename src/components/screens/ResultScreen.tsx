import { useGameFlowStore } from '../../store/useGameFlowStore';
import { useMissionStore } from '../../store/useMissionStore';
import { STAGE_1_MISSIONS } from '../../core/missions/stage1Missions';
import { STAGE_2_MISSIONS } from '../../core/missions/stage2Missions';

export const ResultScreen = () => {
  const { mission, executionResult, goToProgramming, resetFlow } = useGameFlowStore();
  const { setCurrentMission } = useMissionStore();

  if (!mission || !executionResult) return null;

  const allMissions = [...STAGE_1_MISSIONS, ...STAGE_2_MISSIONS];
  const currentIndex = allMissions.findIndex(m => m.id === mission.id);
  const nextMission = currentIndex >= 0 && currentIndex < allMissions.length - 1
    ? allMissions[currentIndex + 1]
    : null;

  const handleRetry = () => {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏—Å—Å–∏—é –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    const { resetMissionToInitial } = useGameFlowStore.getState();
    resetMissionToInitial();
    goToProgramming();
  };

  const handleNextMission = () => {
    if (nextMission) {
      // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π flow
      resetFlow();
      // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–∏—Å—Å–∏—é (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç startMission —á–µ—Ä–µ–∑ useEffect –≤ MissionView)
      setCurrentMission(nextMission);
    }
  };

  const handleMainMenu = () => {
    setCurrentMission(null);
    resetFlow();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-deep-blue via-dark-purple to-deep-blue text-white p-8 flex items-center justify-center">
      <div className="max-w-2xl w-full">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          {executionResult.success ? (
            <>
              <div className="text-6xl mb-4">üéâ</div>
              <h1 className="text-5xl font-heading font-bold mb-4 text-bright-cyan">
                –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!
              </h1>
              <p className="text-xl text-gray-300">–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –ò–Ω–∂–µ–Ω–µ—Ä!</p>
            </>
          ) : (
            <>
              <div className="text-6xl mb-4">üòî</div>
              <h1 className="text-5xl font-heading font-bold mb-4 text-error-red">
                –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞
              </h1>
              <p className="text-xl text-gray-300">–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!</p>
            </>
          )}
        </div>

        {/* –ó–≤—ë–∑–¥—ã */}
        {executionResult.success && (
          <div className="flex justify-center gap-4 mb-8">
            {[1, 2, 3].map(star => (
              <div
                key={star}
                className={`text-6xl transition-all ${
                  star <= executionResult.stars
                    ? 'text-warning-yellow scale-110'
                    : 'text-gray-600 scale-90'
                }`}
              >
                ‚≠ê
              </div>
            ))}
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="mb-8 p-6 bg-deep-blue/50 rounded-lg border border-bright-cyan/30">
          <h2 className="text-2xl font-heading mb-4 text-bright-cyan">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          <div className="grid grid-cols-2 gap-4">
            <div className="flex items-center gap-3">
              <span className="text-3xl">üìè</span>
              <div>
                <div className="text-sm text-gray-400">–î–∏—Å—Ç–∞–Ω—Ü–∏—è</div>
                <div className="text-xl font-bold">{executionResult.statistics.distance} –∫–ª–µ—Ç–æ–∫</div>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <span className="text-3xl">‚ö°</span>
              <div>
                <div className="text-sm text-gray-400">–≠–Ω–µ—Ä–≥–∏—è</div>
                <div className="text-xl font-bold">{Math.round(executionResult.statistics.energyLeft)}%</div>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <span className="text-3xl">üì¶</span>
              <div>
                <div className="text-sm text-gray-400">–ë–ª–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</div>
                <div className="text-xl font-bold">
                  {executionResult.statistics.blocksUsed}
                  {mission.constraints?.nodeLimit && ` / ${mission.constraints.nodeLimit}`}
                </div>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <span className="text-3xl">‚è±Ô∏è</span>
              <div>
                <div className="text-sm text-gray-400">–í—Ä–µ–º—è</div>
                <div className="text-xl font-bold">{executionResult.statistics.executionTime}—Å</div>
              </div>
            </div>
          </div>
        </div>

        {/* –¶–µ–ª–∏ */}
        <div className="mb-8 p-6 bg-deep-blue/50 rounded-lg border border-warning-yellow/30">
          <h2 className="text-2xl font-heading mb-4 text-warning-yellow">üéØ –¶–µ–ª–∏ –º–∏—Å—Å–∏–∏</h2>
          <div className="space-y-3">
            {mission.objectives.map(objective => {
              const completed = executionResult.objectives[objective.id];
              return (
                <div key={objective.id} className="flex items-center gap-3">
                  <span className={`text-2xl ${completed ? 'text-green-500' : 'text-gray-500'}`}>
                    {completed ? '‚úÖ' : '‚ùå'}
                  </span>
                  <span className={completed ? 'text-white' : 'text-gray-400'}>
                    {objective.description}
                  </span>
                </div>
              );
            })}
          </div>
        </div>

        {/* –ù–∞–≥—Ä–∞–¥—ã */}
        {executionResult.success && mission.rewards && (
          <div className="mb-8 p-6 bg-gradient-to-r from-warning-yellow/20 to-bright-orange/20 rounded-lg border border-warning-yellow/50">
            <h2 className="text-2xl font-heading mb-4 text-warning-yellow">üéÅ –ù–∞–≥—Ä–∞–¥—ã</h2>
            <div className="flex items-center gap-6">
              {mission.rewards.credits && (
                <div className="flex items-center gap-2">
                  <span className="text-4xl">üí∞</span>
                  <span className="text-2xl font-bold text-warning-yellow">
                    +{mission.rewards.credits}
                  </span>
                  <span className="text-gray-400">–∫—Ä–µ–¥–∏—Ç–æ–≤</span>
                </div>
              )}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-4 justify-center">
          <button
            onClick={handleMainMenu}
            className="px-6 py-3 bg-dark-purple text-white rounded hover:bg-dark-purple/80 transition-colors border border-bright-cyan/30"
          >
            üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          </button>
          
          <button
            onClick={handleRetry}
            className="px-6 py-3 bg-bright-cyan/20 text-bright-cyan rounded hover:bg-bright-cyan/30 transition-colors border border-bright-cyan"
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>

          {executionResult.success && nextMission && (
            <button
              onClick={handleNextMission}
              className="px-8 py-3 bg-gradient-to-r from-bright-cyan to-bright-orange text-deep-blue font-bold rounded hover:scale-105 transition-transform"
            >
              ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –º–∏—Å—Å–∏—è
            </button>
          )}
        </div>
      </div>
    </div>
  );
};
