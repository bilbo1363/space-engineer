import { Mission, MissionObjective } from '../types/missions';
import { RobotState } from '../types/robots';

export interface MissionResult {
  success: boolean;
  completedObjectives: string[];
  stars: number;
}

export class MissionValidator {
  private mission: Mission;
  private robotState: RobotState;
  private completedObjectives: Set<string> = new Set();

  constructor(mission: Mission, robotState: RobotState) {
    this.mission = mission;
    this.robotState = robotState;
  }

  checkObjectives(): void {
    this.mission.objectives.forEach(objective => {
      if (this.checkObjective(objective)) {
        this.completedObjectives.add(objective.id);
      }
    });
  }

  private checkObjective(objective: MissionObjective): boolean {
    switch (objective.type) {
      case 'reach':
      case 'move':
        return this.checkReachObjective(objective);
      
      case 'pickup':
        return this.checkPickupObjective(objective);
      
      case 'deliver':
        return this.checkDeliverObjective(objective);
      
      case 'log_at':
        return this.checkLogAtObjective(objective);
      
      default:
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏:', objective.type);
        return false;
    }
  }

  private checkReachObjective(objective: MissionObjective): boolean {
    const [targetX, targetY] = objective.target as [number, number];
    const [robotX, robotY] = this.robotState.position;
    return robotX === targetX && robotY === targetY;
  }

  private checkPickupObjective(objective: MissionObjective): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –≤–∑—è—Ç
    const targetId = objective.target as string;
    const pickedUpItems = this.robotState.pickedUpItems || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–±–æ —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å–µ–π—á–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –ª–∏–±–æ –±—ã–ª –≤–∑—è—Ç —Ä–∞–Ω–µ–µ
    const hasItemNow = this.robotState.inventory.includes(targetId);
    const hasPickedUpBefore = pickedUpItems.includes(targetId);
    
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', {
      targetId,
      hasItemNow,
      hasPickedUpBefore,
      inventory: this.robotState.inventory,
      pickedUpItems
    });
    
    return hasItemNow || hasPickedUpBefore;
  }

  private checkDeliverObjective(objective: MissionObjective): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±–∞–∑—É
    const targetBaseId = objective.target as string;
    const baseObject = this.mission.objects.find(obj => 
      obj.type === 'base' && (obj.id === targetBaseId || !targetBaseId)
    );
    
    if (!baseObject) {
      console.log('‚ùå –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return false;
    }

    const [baseX, baseY] = baseObject.position;
    const [robotX, robotY] = this.robotState.position;
    
    const onBase = robotX === baseX && robotY === baseY;
    const inventoryEmpty = this.robotState.inventory.length === 0;
    const delivered = baseObject.properties?.delivered === true;
    const pickedUpItems = this.robotState.pickedUpItems || [];
    const hasPickedUpSomething = pickedUpItems.length > 0;
    
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', {
      onBase,
      inventoryEmpty,
      delivered,
      hasPickedUpSomething,
      robotPos: [robotX, robotY],
      basePos: [baseX, baseY],
      pickedUpItems
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –≤–∑—è—Ç –ò –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±–∞–∑—É
    return hasPickedUpSomething && ((onBase && inventoryEmpty) || delivered);
  }

  private checkLogAtObjective(objective: MissionObjective): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –±—ã–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏
    const target = objective.target as { positions: [number, number][]; requiredMessage?: string };
    
    if (!target.positions) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
    const allActivated = target.positions.every(([x, y]) => {
      const station = this.mission.objects.find(obj =>
        obj.type === 'station' &&
        obj.position[0] === x &&
        obj.position[1] === y
      );

      if (!station) {
        console.log(`‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ [${x}, ${y}]`);
        return false;
      }

      const isActivated = station.properties?.activated === true;
      console.log(`üéØ –°—Ç–∞–Ω—Ü–∏—è –Ω–∞ [${x}, ${y}]: ${isActivated ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ' : '–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ùå'}`);
      
      return isActivated;
    });

    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ log_at:', {
      allActivated,
      positions: target.positions,
      requiredMessage: target.requiredMessage
    });

    return allActivated;
  }

  getResult(): MissionResult {
    const requiredObjectives = this.mission.objectives.filter(obj => obj.required);
    const completedRequired = requiredObjectives.filter(obj => 
      this.completedObjectives.has(obj.id)
    );

    const success = completedRequired.length === requiredObjectives.length;
    const stars = this.calculateStars(success);

    return {
      success,
      completedObjectives: Array.from(this.completedObjectives),
      stars,
    };
  }

  private calculateStars(success: boolean): number {
    if (!success) return 0;

    let stars = 1; // –ë–∞–∑–æ–≤–∞—è –∑–≤–µ–∑–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    // –í—Ç–æ—Ä–∞—è –∑–≤–µ–∑–¥–∞ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    
    // –¢—Ä–µ—Ç—å—è –∑–≤–µ–∑–¥–∞ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    return stars;
  }
}
