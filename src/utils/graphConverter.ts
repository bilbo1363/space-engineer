import { ProgramGraph } from '../types/flowGraph';
import { ProgramNodeInstance } from '../types/nodes';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≥—Ä–∞—Ñ–∞ –≤ –ª–∏–Ω–µ–π–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
 * –û–±—Ö–æ–¥–∏—Ç –≥—Ä–∞—Ñ –Ω–∞—á–∏–Ω–∞—è –æ—Ç Start –Ω–æ–¥—ã –∏ —Å—Ç—Ä–æ–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
 */
export class GraphConverter {
  private graph: ProgramGraph;
  private visited: Set<string>;

  constructor(graph: ProgramGraph) {
    this.graph = graph;
    this.visited = new Set();
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –≤ –ª–∏–Ω–µ–π–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
   */
  convert(): ProgramNodeInstance[] {
    const program: ProgramNodeInstance[] = [];
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –Ω–æ–¥—É
    const startNode = this.graph.nodes.find(n => n.type === 'start');
    if (!startNode) {
      console.error('‚ùå –ù–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –Ω–æ–¥—ã!');
      return [];
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ —Å —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –Ω–æ–¥—ã
    this.traverseFrom(startNode.id, program);

    console.log('‚úÖ –ì—Ä–∞—Ñ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É:', program);
    return program;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –Ω–æ–¥—ã
   */
  private traverseFrom(nodeId: string, program: ProgramNodeInstance[]): void {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤
    if (this.visited.has(nodeId)) {
      return;
    }
    this.visited.add(nodeId);

    const node = this.graph.nodes.find(n => n.id === nodeId);
    if (!node) return;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º start –∏ end –Ω–æ–¥—ã
    if (node.type === 'start' || node.type === 'end') {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ
      const nextEdge = this.graph.edges.find(e => e.source === nodeId);
      if (nextEdge) {
        this.traverseFrom(nextEdge.target, program);
      }
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º action –Ω–æ–¥—É
    if (node.type === 'action') {
      const actionData = node.data as any;
      program.push({
        id: `node_${Date.now()}_${Math.random()}`,
        nodeType: actionData.nodeType,
        parameters: actionData.parameters || {},
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ
      const nextEdge = this.graph.edges.find(e => e.source === nodeId);
      if (nextEdge) {
        this.traverseFrom(nextEdge.target, program);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º customAction –Ω–æ–¥—É
    if (node.type === 'customAction') {
      const actionData = node.data as any;
      program.push({
        id: `node_${Date.now()}_${Math.random()}`,
        nodeType: actionData.actionType || 'activate',
        parameters: actionData.parameters || {},
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ
      const nextEdge = this.graph.edges.find(e => e.source === nodeId);
      if (nextEdge) {
        this.traverseFrom(nextEdge.target, program);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º condition –Ω–æ–¥—É
    if (node.type === 'condition') {
      const conditionData = node.data as any;
      
      // –°–æ–∑–¥–∞—ë–º IF –±–ª–æ–∫
      const ifNode: ProgramNodeInstance = {
        id: `node_${Date.now()}_${Math.random()}`,
        nodeType: 'if',
        parameters: { condition: conditionData.condition },
        children: [],
        elseBranch: [],
      };

      // –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ç–∫–∏ true –∏ false
      const trueEdge = this.graph.edges.find(e => e.source === nodeId && e.sourceHandle === 'true');
      const falseEdge = this.graph.edges.find(e => e.source === nodeId && e.sourceHandle === 'false');

      console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ condition –Ω–æ–¥—ã:', {
        nodeId,
        condition: conditionData.condition,
        hasTrueEdge: !!trueEdge,
        hasFalseEdge: !!falseEdge,
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º true –≤–µ—Ç–∫—É
      if (trueEdge) {
        const trueBranch: ProgramNodeInstance[] = [];
        this.traverseFrom(trueEdge.target, trueBranch);
        ifNode.children = trueBranch;
        console.log('‚úÖ TRUE –≤–µ—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', trueBranch.length, '–Ω–æ–¥');
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º false –≤–µ—Ç–∫—É (else)
      if (falseEdge) {
        const falseBranch: ProgramNodeInstance[] = [];
        this.traverseFrom(falseEdge.target, falseBranch);
        ifNode.elseBranch = falseBranch;
        console.log('‚úÖ FALSE –≤–µ—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', falseBranch.length, '–Ω–æ–¥');
      }
      
      program.push(ifNode);
      return; // –í–ê–ñ–ù–û: –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ö–æ–¥ –ø–æ—Å–ª–µ condition –Ω–æ–¥—ã
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º loop –Ω–æ–¥—É
    if (node.type === 'loop') {
      const loopData = node.data as any;
      
      console.log('üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ loop –Ω–æ–¥—ã:', {
        nodeId: node.id,
        loopType: loopData.loopType,
        count: loopData.count,
        condition: loopData.condition,
        label: loopData.label,
        fullData: JSON.stringify(loopData, null, 2),
      });
      
      // –°–æ–∑–¥–∞—ë–º LOOP –±–ª–æ–∫
      const loopNode: ProgramNodeInstance = {
        id: `node_${Date.now()}_${Math.random()}`,
        nodeType: loopData.loopType === 'repeat' ? 'repeat' : 'repeatWhile',
        parameters: loopData.loopType === 'repeat' 
          ? { count: loopData.count || 5 }
          : { condition: loopData.condition || 'true' },
        children: [],
      };
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω loop –±–ª–æ–∫:', JSON.stringify(loopNode, null, 2));

      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–ª–æ —Ü–∏–∫–ª–∞
      const bodyEdge = this.graph.edges.find(e => e.source === nodeId && e.sourceHandle === 'body');
      if (bodyEdge) {
        const loopBody: ProgramNodeInstance[] = [];
        this.traverseFrom(bodyEdge.target, loopBody);
        loopNode.children = loopBody;
      }

      program.push(loopNode);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
      const nextEdge = this.graph.edges.find(e => e.source === nodeId && e.sourceHandle === 'next');
      if (nextEdge) {
        this.traverseFrom(nextEdge.target, program);
      }
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
   */
  static validate(graph: ProgramGraph): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –Ω–æ–¥—ã
    const startNodes = graph.nodes.filter(n => n.type === 'start');
    if (startNodes.length === 0) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –Ω–æ–¥–∞');
    }
    if (startNodes.length > 1) {
      errors.push('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –Ω–æ–¥');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –Ω–æ–¥—ã
    const endNodes = graph.nodes.filter(n => n.type === 'end');
    if (endNodes.length === 0) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω–µ—á–Ω–∞—è –Ω–æ–¥–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –Ω–æ–¥—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã
    const connectedNodes = new Set<string>();
    graph.edges.forEach(edge => {
      connectedNodes.add(edge.source);
      connectedNodes.add(edge.target);
    });

    const disconnectedNodes = graph.nodes.filter(n => 
      n.type !== 'start' && n.type !== 'end' && !connectedNodes.has(n.id)
    );

    if (disconnectedNodes.length > 0) {
      errors.push(`–ù–µ—Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –Ω–æ–¥—ã: ${disconnectedNodes.length}`);
    }

    return {
      valid: errors.length === 0,
      errors,
    };
  }
}
