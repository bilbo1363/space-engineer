import { useCallback, useState, useRef, useMemo, useEffect } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  addEdge,
  useNodesState,
  useEdgesState,
  Connection,
  Edge,
  Node,
  BackgroundVariant,
  ReactFlowInstance,
} from 'reactflow';
import 'reactflow/dist/style.css';

import { FlowNode, FlowEdge, ProgramGraph } from '../../types/flowGraph';
import { StartNode } from './nodes/StartNode';
import { EndNode } from './nodes/EndNode';
import { ActionNode } from './nodes/ActionNode';
import { CustomActionNode } from './nodes/CustomActionNode';
import { ConditionNode } from './nodes/ConditionNode';
import { LoopNode } from './nodes/LoopNode';
import { SchemaManager, SavedSchema } from '../../utils/schemaManager';
import { SchemaManagerPanel } from './SchemaManagerPanel';

interface NodeBasedEditorProps {
  initialGraph?: ProgramGraph;
  onGraphChange?: (graph: ProgramGraph) => void;
}

export const NodeBasedEditor = ({ initialGraph, onGraphChange }: NodeBasedEditorProps) => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>(initialGraph?.nodes as Node[] || []);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>(initialGraph?.edges as Edge[] || []);
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null);
  
  // –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è Undo/Redo
  const [history, setHistory] = useState<{ nodes: Node[]; edges: Edge[] }[]>([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º–∞–º–∏
  const [showSchemaMenu, setShowSchemaMenu] = useState(false);
  const [showTemplates, setShowTemplates] = useState(false);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–æ–¥
  const nodeTypes = useMemo(
    () => ({
      start: StartNode,
      end: EndNode,
      action: ActionNode,
      customAction: CustomActionNode,
      condition: ConditionNode,
      loop: LoopNode,
    }),
    []
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤—è–∑–∏
  const onConnect = useCallback(
    (params: Connection) => {
      const newEdge = {
        ...params,
        animated: true,
        style: { stroke: '#00FFFF', strokeWidth: 2 },
        className: 'react-flow__edge-path',
      };
      setEdges((eds) => {
        const updated = addEdge(newEdge, eds);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        setTimeout(() => {
          setHistory((prev) => [...prev.slice(-19), { nodes, edges: updated }]);
          setHistoryIndex((prev) => prev + 1);
        }, 0);
        return updated;
      });
      
      if (onGraphChange) {
        onGraphChange({
          nodes: nodes as unknown as FlowNode[],
          edges: [...edges, newEdge] as unknown as FlowEdge[],
        });
      }
    },
    [nodes, edges, onGraphChange, setEdges]
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥/—Å–≤—è–∑–µ–π
  const onNodesDelete = useCallback(
    (deleted: Node[]) => {
      console.log('–£–¥–∞–ª–µ–Ω—ã –Ω–æ–¥—ã:', deleted);
      if (onGraphChange) {
        onGraphChange({
          nodes: nodes.filter(n => !deleted.find(d => d.id === n.id)) as unknown as FlowNode[],
          edges: edges as unknown as FlowEdge[],
        });
      }
    },
    [nodes, edges, onGraphChange]
  );

  const onEdgesDelete = useCallback(
    (deleted: Edge[]) => {
      console.log('–£–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∏:', deleted);
      if (onGraphChange) {
        onGraphChange({
          nodes: nodes as unknown as FlowNode[],
          edges: edges.filter(e => !deleted.find(d => d.id === e.id)) as unknown as FlowEdge[],
        });
      }
    },
    [nodes, edges, onGraphChange]
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Drop –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current?.getBoundingClientRect();
      const data = event.dataTransfer.getData('application/reactflow');

      if (!data || !reactFlowBounds || !reactFlowInstance) return;

      const nodeData = JSON.parse(data);
      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const newNode: Node = {
        id: `node_${Date.now()}`,
        type: nodeData.type,
        position,
        data: {
          ...nodeData,  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è loopType, count, condition)
        },
      };

      setNodes((nds) => nds.concat(newNode));
      
      if (onGraphChange) {
        onGraphChange({
          nodes: [...nodes, newNode] as unknown as FlowNode[],
          edges: edges as unknown as FlowEdge[],
        });
      }
    },
    [reactFlowInstance, nodes, edges, onGraphChange, setNodes]
  );

  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π (–¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–¥)
  const onEdgeUpdate = useCallback(
    (oldEdge: Edge, newConnection: Connection) => {
      setEdges((els) => {
        const updatedEdges = els.filter((e) => e.id !== oldEdge.id);
        return addEdge(newConnection, updatedEdges);
      });
    },
    [setEdges]
  );

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ onConnect

  // Undo
  const undo = useCallback(() => {
    if (historyIndex > 0) {
      const prevState = history[historyIndex - 1];
      setNodes(prevState.nodes);
      setEdges(prevState.edges);
      setHistoryIndex((prev) => prev - 1);
    }
  }, [history, historyIndex, setNodes, setEdges]);

  // Redo
  const redo = useCallback(() => {
    if (historyIndex < history.length - 1) {
      const nextState = history[historyIndex + 1];
      setNodes(nextState.nodes);
      setEdges(nextState.edges);
      setHistoryIndex((prev) => prev + 1);
    }
  }, [history, historyIndex, setNodes, setEdges]);

  // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if ((event.ctrlKey || event.metaKey) && event.key === 'z') {
        event.preventDefault();
        undo();
      }
      if ((event.ctrlKey || event.metaKey) && event.key === 'y') {
        event.preventDefault();
        redo();
      }
      if ((event.ctrlKey || event.metaKey) && event.key === 's') {
        event.preventDefault();
        handleSaveSchema();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [undo, redo]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º - —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–æ, SchemaManagerPanel —Å–∞–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è nodes/edges –∏ –≤—ã–∑—ã–≤–∞–µ–º onGraphChange
  useEffect(() => {
    if (onGraphChange && nodes.length > 0) {
      console.log('üìä Nodes/Edges –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –≤—ã–∑—ã–≤–∞–µ–º onGraphChange:', { nodes, edges });
      onGraphChange({
        nodes: nodes as unknown as FlowNode[],
        edges: edges as unknown as FlowEdge[],
      });
    }
  }, [nodes, edges, onGraphChange]);

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É
  const handleSaveSchema = () => {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã:');
    if (!name) return;
    
    const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
    
    SchemaManager.saveSchema(name, { nodes: nodes as unknown as FlowNode[], edges: edges as unknown as FlowEdge[] }, description || undefined);
    alert('‚úÖ –°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ SchemaManagerPanel

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
  const handleLoadTemplate = (template: SavedSchema) => {
    if (confirm(`–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω "${template.name}"? –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞.`)) {
      setNodes(template.graph.nodes as Node[]);
      setEdges(template.graph.edges as Edge[]);
      setShowTemplates(false);
      
      if (onGraphChange) {
        onGraphChange(template.graph);
      }
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
  const handleExport = () => {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', 'my_schema');
    if (!name) return;
    
    const schema: SavedSchema = {
      id: `export_${Date.now()}`,
      name,
      graph: { nodes: nodes as unknown as FlowNode[], edges: edges as unknown as FlowEdge[] },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
    
    SchemaManager.exportToFile(schema);
  };

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ö–µ–º—É (—Å–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é)
  const handleClear = () => {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å —Å—Ö–µ–º—É? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
      const defaultGraph: ProgramGraph = {
        nodes: [
          {
            id: 'start',
            type: 'start',
            position: { x: 50, y: 250 },
            data: { label: '–ù–∞—á–∞–ª–æ', icon: '‚ñ∂Ô∏è' },
          },
          {
            id: 'end',
            type: 'end',
            position: { x: 600, y: 250 },
            data: { label: '–ö–æ–Ω–µ—Ü', icon: '‚èπÔ∏è' },
          },
        ],
        edges: [],
      };
      
      setNodes(defaultGraph.nodes as Node[]);
      setEdges(defaultGraph.edges as Edge[]);
      
      if (onGraphChange) {
        onGraphChange(defaultGraph);
      }
      
      console.log('üßπ –°—Ö–µ–º–∞ –æ—á–∏—â–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≥—Ä–∞—Ñ');
    }
  };

  // –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
  const handleImport = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (!file) return;
      
      try {
        const schema = await SchemaManager.importFromFile(file);
        setNodes(schema.graph.nodes as Node[]);
        setEdges(schema.graph.edges as Edge[]);
        alert('‚úÖ –°—Ö–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!');
        
        if (onGraphChange) {
          onGraphChange(schema.graph);
        }
      } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞');
      }
    };
    input.click();
  };

  return (
    <div 
      ref={reactFlowWrapper}
      className="w-full h-full bg-deep-blue rounded border-2 border-bright-cyan/30"
      onDrop={onDrop}
      onDragOver={onDragOver}
    >
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onNodesDelete={onNodesDelete}
        onEdgesDelete={onEdgesDelete}
        onEdgeUpdate={onEdgeUpdate}
        onInit={setReactFlowInstance}
        nodeTypes={nodeTypes}
        fitView
        attributionPosition="bottom-left"
        deleteKeyCode="Delete"
        edgesUpdatable={true}
        edgesFocusable={true}
        elementsSelectable={true}
        defaultEdgeOptions={{
          animated: true,
          style: { stroke: '#00FFFF', strokeWidth: 2 },
          type: 'smoothstep',
        }}
        connectionLineStyle={{ stroke: '#FF8C00', strokeWidth: 3 }}
        reconnectRadius={20}
        style={{
          background: '#0A0E2E',
        }}
        // –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        className="node-based-editor"
      >
        <style>{`
          .node-based-editor .react-flow__node.selected {
            box-shadow: 0 0 20px 5px #00FFFF !important;
            border: 3px solid #00FFFF !important;
          }
          .node-based-editor .react-flow__edge.selected .react-flow__edge-path {
            stroke: #FF8C00 !important;
            stroke-width: 4px !important;
            filter: drop-shadow(0 0 10px #FF8C00);
          }
          .node-based-editor .react-flow__edge:hover .react-flow__edge-path {
            stroke: #FFD700 !important;
            stroke-width: 3px !important;
          }
        `}</style>
        {/* –°–µ—Ç–∫–∞ */}
        <Background
          variant={BackgroundVariant.Dots}
          gap={20}
          size={1}
          color="#00FFFF"
          style={{ opacity: 0.2 }}
        />

        {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã (zoom, pan) */}
        <Controls />
        
        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º–∞–º–∏ */}
        <div className="absolute top-4 right-4 flex flex-col gap-2 z-10">
          <button
            onClick={handleSaveSchema}
            className="px-4 py-2 bg-bright-cyan text-deep-blue font-bold rounded hover:bg-bright-cyan/90 transition-colors shadow-lg"
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É (Ctrl+S)"
          >
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
          
          <button
            onClick={() => setShowSchemaMenu(!showSchemaMenu)}
            className="px-4 py-2 bg-bright-orange text-deep-blue font-bold rounded hover:bg-bright-orange/90 transition-colors shadow-lg"
            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É"
          >
            üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
          
          <button
            onClick={() => setShowTemplates(!showTemplates)}
            className="px-4 py-2 bg-warning-yellow text-deep-blue font-bold rounded hover:bg-warning-yellow/90 transition-colors shadow-lg"
            title="–®–∞–±–ª–æ–Ω—ã"
          >
            üìã –®–∞–±–ª–æ–Ω—ã
          </button>
          
          <button
            onClick={handleExport}
            className="px-4 py-2 bg-gray-600 text-white font-bold rounded hover:bg-gray-500 transition-colors shadow-lg"
            title="–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª"
          >
            ‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç
          </button>
          
          <button
            onClick={handleImport}
            className="px-4 py-2 bg-gray-600 text-white font-bold rounded hover:bg-gray-500 transition-colors shadow-lg"
            title="–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞"
          >
            ‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç
          </button>
          
          <button
            onClick={handleClear}
            className="px-4 py-2 bg-red-600 text-white font-bold rounded hover:bg-red-500 transition-colors shadow-lg"
            title="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ö–µ–º—É"
          >
            üßπ –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º–∞–º–∏ */}
        {showSchemaMenu && (
          <SchemaManagerPanel
            onLoadSchema={(schema) => {
              if (confirm(`–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É "${schema.name}"? –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞.`)) {
                setNodes(schema.graph.nodes as Node[]);
                setEdges(schema.graph.edges as Edge[]);
              }
            }}
            onClose={() => setShowSchemaMenu(false)}
          />
        )}

        {/* –ú–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤ */}
        {showTemplates && (
          <div className="absolute top-4 right-56 bg-dark-purple border-2 border-warning-yellow rounded-lg p-4 shadow-xl z-20">
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-warning-yellow font-bold">–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã</h3>
              <button
                onClick={() => setShowTemplates(false)}
                className="text-white hover:text-warning-yellow"
              >
                ‚úï
              </button>
            </div>
            <div className="space-y-2">
              {SchemaManager.getTemplates().map((template) => (
                <div
                  key={template.id}
                  className="p-3 bg-deep-blue rounded border border-warning-yellow/30 hover:border-warning-yellow cursor-pointer transition-colors"
                  onClick={() => handleLoadTemplate(template)}
                >
                  <div className="font-bold text-white">{template.name}</div>
                  {template.description && (
                    <div className="text-xs text-gray-400 mt-1">{template.description}</div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞ */}
        <MiniMap
          style={{
            backgroundColor: '#1A1A2E',
            border: '2px solid #00FFFF',
          }}
          nodeColor="#00FFFF"
          maskColor="rgba(10, 14, 46, 0.8)"
        />
      </ReactFlow>
    </div>
  );
};
