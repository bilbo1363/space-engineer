interface NodePaletteItem {
  type: string;
  label: string;
  icon: string;
  category: string;
  color: string;
}

export const FlowNodePalette = () => {
  // –°–æ–∑–¥–∞—ë–º –ø–∞–ª–∏—Ç—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  const paletteItems: NodePaletteItem[] = [
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–ª–æ–∫–∏
    { type: 'start', label: '–ù–∞—á–∞–ª–æ', icon: '‚ñ∂Ô∏è', category: 'system', color: '#00FF00' },
    { type: 'end', label: '–ö–æ–Ω–µ—Ü', icon: '‚èπÔ∏è', category: 'system', color: '#FF0000' },
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    { type: 'moveForward', label: '–í–ø–µ—Ä–µ–¥', icon: '‚Üë', category: 'action', color: '#00FFFF' },
    { type: 'turnLeft', label: '–ù–∞–ª–µ–≤–æ', icon: '‚Ü∞', category: 'action', color: '#00FFFF' },
    { type: 'turnRight', label: '–ù–∞–ø—Ä–∞–≤–æ', icon: '‚Ü±', category: 'action', color: '#00FFFF' },
    { type: 'customAction', label: '–î–µ–π—Å—Ç–≤–∏–µ', icon: 'üéØ', category: 'customAction', color: '#00FFFF' },
    
    // –£—Å–ª–æ–≤–∏—è
    { type: 'condition', label: '–£—Å–ª–æ–≤–∏–µ', icon: '‚ùì', category: 'condition', color: '#FFD700' },
    
    // –¶–∏–∫–ª—ã
    { type: 'repeat', label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', icon: 'üîÅ', category: 'loop', color: '#FF8C00' },
    { type: 'while', label: '–ü–æ–∫–∞', icon: 'üîÑ', category: 'loop', color: '#FF8C00' },
  ];

  const onDragStart = (event: React.DragEvent, item: NodePaletteItem) => {
    const nodeData: any = {
      type: item.category,
      nodeType: item.type,
      label: item.label,
      icon: item.icon,
    };

    // –î–ª—è —Ü–∏–∫–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (item.category === 'loop') {
      if (item.type === 'repeat') {
        nodeData.loopType = 'repeat';
        nodeData.count = 5;
        nodeData.label = '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å 5';
      } else if (item.type === 'while') {
        nodeData.loopType = 'while';
        nodeData.condition = 'energy > 50';
        nodeData.label = '–ü–æ–∫–∞ energy > 50';
      }
    }
    
    // –î–ª—è —É—Å–ª–æ–≤–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (item.category === 'condition') {
      nodeData.condition = 'isDoorOpen';
      nodeData.label = '–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞';
    }
    
    // –î–ª—è customAction –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (item.category === 'customAction') {
      nodeData.type = 'customAction';
      nodeData.actionType = 'activate';
      nodeData.label = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
      nodeData.icon = '‚ö°';
    }

    event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));
    event.dataTransfer.effectAllowed = 'move';
  };

  return (
    <div className="p-4 bg-dark-purple rounded border border-bright-cyan/30">
      <h3 className="text-lg font-heading text-bright-cyan mb-4">üì¶ –ë–ª–æ–∫–∏</h3>
      
      {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ */}
      <div className="mb-4">
        <div className="text-sm text-gray-400 mb-2">–°–∏—Å—Ç–µ–º–Ω—ã–µ</div>
        <div className="space-y-2">
          {paletteItems.filter(item => item.category === 'system').map((item) => (
            <div
              key={item.type}
              draggable
              onDragStart={(e) => onDragStart(e, item)}
              className="px-3 py-2 bg-gray-700/50 border border-gray-500/30 rounded cursor-move hover:bg-gray-600/50 hover:border-gray-400 transition-all flex items-center gap-2"
            >
              <span className="text-xl">{item.icon}</span>
              <span className="text-white text-sm">{item.label}</span>
            </div>
          ))}
        </div>
      </div>
      
      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="mb-4">
        <div className="text-sm text-gray-400 mb-2">–î–µ–π—Å—Ç–≤–∏—è</div>
        <div className="space-y-2">
          {paletteItems.filter(item => item.category === 'action').map((item) => (
            <div
              key={item.type}
              draggable
              onDragStart={(e) => onDragStart(e, item)}
              className="px-3 py-2 bg-bright-cyan/10 border border-bright-cyan/30 rounded cursor-move hover:bg-bright-cyan/20 hover:border-bright-cyan transition-all flex items-center gap-2"
            >
              <span className="text-xl">{item.icon}</span>
              <span className="text-white text-sm">{item.label}</span>
            </div>
          ))}
          {paletteItems.filter(item => item.category === 'customAction').map((item) => (
            <div
              key={item.type}
              draggable
              onDragStart={(e) => onDragStart(e, item)}
              className="px-3 py-2 bg-bright-cyan/20 border border-bright-cyan/50 rounded cursor-move hover:bg-bright-cyan/30 hover:border-bright-cyan transition-all flex items-center gap-2"
            >
              <span className="text-xl">{item.icon}</span>
              <span className="text-white text-sm font-bold">{item.label}</span>
            </div>
          ))}
        </div>
      </div>

      {/* –£—Å–ª–æ–≤–∏—è */}
      <div className="mb-4">
        <div className="text-sm text-gray-400 mb-2">–£—Å–ª–æ–≤–∏—è</div>
        <div className="space-y-2">
          {paletteItems.filter(item => item.category === 'condition').map((item) => (
            <div
              key={item.type}
              draggable
              onDragStart={(e) => onDragStart(e, item)}
              className="px-3 py-2 bg-warning-yellow/10 border border-warning-yellow/30 rounded cursor-move hover:bg-warning-yellow/20 hover:border-warning-yellow transition-all flex items-center gap-2"
            >
              <span className="text-xl">{item.icon}</span>
              <span className="text-white text-sm">{item.label}</span>
            </div>
          ))}
        </div>
      </div>

      {/* –¶–∏–∫–ª—ã */}
      <div>
        <div className="text-sm text-gray-400 mb-2">–¶–∏–∫–ª—ã</div>
        <div className="space-y-2">
          {paletteItems.filter(item => item.category === 'loop').map((item) => (
            <div
              key={item.type}
              draggable
              onDragStart={(e) => onDragStart(e, item)}
              className="px-3 py-2 bg-bright-orange/10 border border-bright-orange/30 rounded cursor-move hover:bg-bright-orange/20 hover:border-bright-orange transition-all flex items-center gap-2"
            >
              <span className="text-xl">{item.icon}</span>
              <span className="text-white text-sm">{item.label}</span>
            </div>
          ))}
        </div>
      </div>

      <div className="mt-4 text-xs text-gray-500 text-center">
        –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–ª–æ–∫ –Ω–∞ —Ö–æ–ª—Å—Ç
      </div>
    </div>
  );
};
